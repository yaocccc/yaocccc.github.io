<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>wilder.nvim —— vim、nvim cmdline增强</title>
    <link href="/wilder-nvim/"/>
    <url>/wilder-nvim/</url>
    
    <content type="html"><![CDATA[<h1 id="wilder-nvim-——-vim、nvim-cmdline增强"><a href="#wilder-nvim-——-vim、nvim-cmdline增强" class="headerlink" title="wilder.nvim —— vim、nvim cmdline增强"></a>wilder.nvim —— vim、nvim cmdline增强</h1><p><img src="/img/wilder/001.png" alt="avatar"></p><p>项目地址: <a href="https://github.com/gelguy/wilder.nvim">https://github.com/gelguy/wilder.nvim</a></p><p>feature:</p><ul><li>优化 : cmdline能力 支持过滤、模糊筛选、历史查看等</li><li>优化 &#x2F; 搜索能力</li></ul><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- packer 最小化配置</span><br>use &#123;<br>  <span class="hljs-string">&quot;gelguy/wilder.nvim&quot;</span>,<br>  <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>      <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wilder&#x27;</span>).setup(&#123; modes = &#123; <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span> &#125; &#125;)<br>  <span class="hljs-keyword">end</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><p>痛点</p><ul><li>无法使用上下键选择</li><li>如果上下键选择的是候选项 但无法像以前那样选择历史命令</li></ul><p>解决</p><ul><li>将上下键设置为wilder#next 和 previous</li><li>当无输入时 直接展示历史命令</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- packer 推荐配置</span><br>use &#123;<br>  <span class="hljs-string">&quot;gelguy/wilder.nvim&quot;</span>,<br>  event = <span class="hljs-string">&#x27;CmdlineEnter&#x27;</span>, <span class="hljs-comment">-- 懒加载：首次进入cmdline时载入</span><br>  <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>      <span class="hljs-keyword">local</span> wilder = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wilder&#x27;</span>)<br>      wilder.setup(&#123;<br>          modes = &#123; <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span> &#125;,<br>          next_key = <span class="hljs-number">0</span>, previous_key = <span class="hljs-number">0</span>, reject_key = <span class="hljs-number">0</span>, accept_key = <span class="hljs-number">0</span><br>      &#125;)<br>      vim.api.nvim_command(<span class="hljs-string">&quot;silent! UpdateRemotePlugins&quot;</span>) <span class="hljs-comment">-- 需要载入一次py依赖 不然模糊过滤等失效</span><br>      <span class="hljs-comment">-- 设置source</span><br>      wilder.set_option(<span class="hljs-string">&#x27;pipeline&#x27;</span>, &#123;<br>          wilder.branch(<br>              <span class="hljs-comment">-- 当默认无输入时 展示15条历史记录</span><br>              &#123;<br>                  wilder.check(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(_, x)</span></span> <span class="hljs-keyword">return</span> vim.fn.empty(x) <span class="hljs-keyword">end</span>),<br>                  wilder.history(<span class="hljs-number">15</span>)<br>              &#125;,<br>              <span class="hljs-comment">-- 当输入时 展示所有匹配项(模糊匹配)</span><br>              wilder.cmdline_pipeline(&#123;<br>                  fuzzy = <span class="hljs-number">1</span>,<br>                  fuzzy_filter = wilder.vim_fuzzy_filter()<br>              &#125;),<br>              <span class="hljs-comment">-- pipeline for search</span><br>              wilder.search_pipeline()<br>          ),<br>      &#125;)<br>      <span class="hljs-comment">-- 设置样式</span><br>      wilder.set_option(<span class="hljs-string">&#x27;renderer&#x27;</span>, wilder.popupmenu_renderer(<br>          wilder.popupmenu_border_theme(&#123;<br>              <span class="hljs-comment">-- 设置特定高亮</span><br>              highlights = &#123;<br>                  accent = <span class="hljs-string">&quot;WilderAccent&quot;</span>,<br>                  selected_accent = <span class="hljs-string">&quot;WilderSelectedAccent&quot;</span>,<br>              &#125;,<br>              highlighter = wilder.basic_highlighter(),<br>              left = &#123; <span class="hljs-string">&#x27; &#x27;</span>, wilder.popupmenu_devicons() &#125;,   <span class="hljs-comment">-- 左侧加入icon</span><br>              right = &#123; <span class="hljs-string">&#x27; &#x27;</span>, wilder.popupmenu_scrollbar() &#125;, <span class="hljs-comment">-- 右侧加入滚动条</span><br>              border = <span class="hljs-string">&#x27;rounded&#x27;</span>,<br>              max_height = <span class="hljs-number">17</span> <span class="hljs-comment">-- 最大高度限制 因为要计算上下 所以17支持最多15个选项</span><br>          &#125;)<br>      ))<br>      <span class="hljs-comment">-- 设置高亮</span><br>      vim.api.nvim_set_hl(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;WilderAccent&#x27;</span>, &#123; fg = <span class="hljs-string">&#x27;#5f87ff&#x27;</span> &#125;)<br>      vim.api.nvim_set_hl(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;WilderSelectedAccent&#x27;</span>, &#123; fg = <span class="hljs-string">&#x27;#5f87ff&#x27;</span>, bg = <span class="hljs-string">&#x27;#4e4e4e&#x27;</span> &#125;)<br>      <span class="hljs-comment">-- 设置快捷键</span><br>      vim.api.nvim_set_keymap(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;&lt;tab&gt;&#x27;</span>, <span class="hljs-string">[[wilder#in_context() ? wilder#next() : &#x27;&lt;tab&gt;&#x27;]]</span>,   &#123; noremap = <span class="hljs-literal">true</span>, expr = <span class="hljs-literal">true</span> &#125;)<br>      vim.api.nvim_set_keymap(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;&lt;Down&gt;&#x27;</span>, <span class="hljs-string">[[wilder#in_context() ? wilder#next() : &#x27;&lt;down&gt;&#x27;]]</span>, &#123; noremap = <span class="hljs-literal">true</span>, expr = <span class="hljs-literal">true</span> &#125;)<br>      vim.api.nvim_set_keymap(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;&lt;up&gt;&#x27;</span>, <span class="hljs-string">[[wilder#in_context() ? wilder#previous() : &#x27;&lt;up&gt;&#x27;]]</span>, &#123; noremap = <span class="hljs-literal">true</span>, expr = <span class="hljs-literal">true</span> &#125;)<br>      vim.api.nvim_set_keymap(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, &#123;&#125;) <span class="hljs-comment">-- 不清楚原因导致0无法使用 强制覆盖</span><br>  <span class="hljs-keyword">end</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>VIM</tag>
      
      <tag>NVIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tabbed 给终端带来多tab能力</title>
    <link href="/tabbed/"/>
    <url>/tabbed/</url>
    
    <content type="html"><![CDATA[<h1 id="tabbed-给终端带来多tab能力"><a href="#tabbed-给终端带来多tab能力" class="headerlink" title="tabbed 给终端带来多tab能力"></a>tabbed 给终端带来多tab能力</h1><p>————再也不羡慕隔壁kitty了</p>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在vim中搜索anything 最强瑞士军刀——fzf</title>
    <link href="/fzf-vim/"/>
    <url>/fzf-vim/</url>
    
    <content type="html"><![CDATA[<h1 id="SEARCH-ANYTHING-——-fzf♥️vim"><a href="#SEARCH-ANYTHING-——-fzf♥️vim" class="headerlink" title="SEARCH ANYTHING —— fzf♥️vim"></a>SEARCH ANYTHING —— fzf♥️vim</h1><p><a href="https://github.com/junegunn/fzf">FZF</a>  </p><p><a href="https://github.com/junegunn/fzf.vim">fzf.vim</a></p><h2 id="安装-Packer举例"><a href="#安装-Packer举例" class="headerlink" title="安装 (Packer举例)"></a>安装 (Packer举例)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">use &#123; &#x27;junegunn/fzf&#x27;, run = &#x27;cd ~/.fzf &amp;&amp; ./install --all&#x27; &#125;<br>use &#123; &#x27;junegunn/fzf.vim&#x27;, after = &quot;fzf&quot; &#125;<br></code></pre></td></tr></table></figure><h2 id="使用demo"><a href="#使用demo" class="headerlink" title="使用demo"></a>使用demo</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:fzf_preview_window</span> = [<span class="hljs-string">&#x27;right,40%,&lt;50(down,50%)&#x27;</span>, <span class="hljs-string">&#x27;ctrl-/&#x27;</span>]<br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:fzf_layout</span> = &#123; <span class="hljs-string">&#x27;window&#x27;</span>: &#123; <span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">0.9</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">0.8</span> &#125; &#125;<br><br>com! -bar -bang Ag <span class="hljs-keyword">call</span> fzf#vim#ag(<span class="hljs-symbol">&lt;q-args&gt;</span>, fzf#vim#with_preview(&#123;<span class="hljs-string">&#x27;options&#x27;</span>: <span class="hljs-string">&#x27;--delimiter=: --nth=4..&#x27;</span>&#125;), <span class="hljs-symbol">&lt;bang&gt;</span><span class="hljs-number">0</span>)<br>com! CHistory <span class="hljs-keyword">call</span> CHistory()<br><br>func! CHistory()<br>  <span class="hljs-keyword">call</span> <span class="hljs-built_in">filter</span>(<span class="hljs-variable">v:oldfiles</span>, <span class="hljs-string">&quot;v:val =~ &#x27;^&#x27; . $PWD . &#x27;.*$&#x27;&quot;</span>)<br>  <span class="hljs-keyword">call</span> fzf#vim#history(fzf#vim#with_preview(), <span class="hljs-number">0</span>)<br><span class="hljs-keyword">endf</span><br><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;c-a&gt;</span> :Ag<span class="hljs-symbol">&lt;cr&gt;</span>        <span class="hljs-comment">&quot; Ag 全局文本搜索</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;c-p&gt;</span> :Files<span class="hljs-symbol">&lt;cr&gt;</span>     <span class="hljs-comment">&quot; 目录下文件搜索</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;c-l&gt;</span> :BLines<span class="hljs-symbol">&lt;cr&gt;</span>    <span class="hljs-comment">&quot; 文件内文本搜索</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;c-g&gt;</span> :GFiles?<span class="hljs-symbol">&lt;cr&gt;</span>   <span class="hljs-comment">&quot; git变更文件搜索</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;c-h&gt;</span> :CHistory<span class="hljs-symbol">&lt;cr&gt;</span>  <span class="hljs-comment">&quot; 目录下最近文件搜索</span><br></code></pre></td></tr></table></figure><h2 id="类似工具"><a href="#类似工具" class="headerlink" title="类似工具"></a>类似工具</h2><ul><li>各类fzf实现</li><li>telescope</li><li>其他</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>VIM</tag>
      
      <tag>NVIM</tag>
      
      <tag>FZF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何把vim的浮动终端玩出花</title>
    <link href="/vimfloaterm/"/>
    <url>/vimfloaterm/</url>
    
    <content type="html"><![CDATA[<h1 id="vim浮动终端-玩出花样"><a href="#vim浮动终端-玩出花样" class="headerlink" title="vim浮动终端 玩出花样"></a>vim浮动终端 玩出花样</h1><p><img src="/img/vimfloaterm/show.gif" alt="show"></p><p><a href="https://github.com/voldikss/vim-floaterm">git仓库地址: https://github.com/voldikss/vim-floaterm</a></p><h2 id="基础安装使用"><a href="#基础安装使用" class="headerlink" title="基础安装使用"></a>基础安装使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">直接使用包管理工具安装<br><br>例如packer<br><br>use &#123; &#x27;voldikss/vim-floaterm&#x27; &#125;<br></code></pre></td></tr></table></figure><h2 id="基础使用-用FloatTerm相关命令打开终端、命令等"><a href="#基础使用-用FloatTerm相关命令打开终端、命令等" class="headerlink" title="基础使用 用FloatTerm相关命令打开终端、命令等"></a>基础使用 用FloatTerm相关命令打开终端、命令等</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">:FloatermNew[!] [option] [cmd]<br><br>e.g.<br>仅打开一个浮动终端 :FloatermNew<br>打开一个浮动终端且执行ranger :FloatermNew ranger<br>打开一个浮动终端且从终端执行命令ls :FloatermNew! ls<br></code></pre></td></tr></table></figure><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">结合FloatermToggle 实现有则toggle 无则新建<br>function toggleFT(name, cmd)<br>    if vim.fn[&#x27;floaterm#terminal#get_bufnr&#x27;](name) ~= -1 then<br>        vim.api.nvim_command(string.format(&#x27;exec &quot;FloatermToggle %s&quot;&#x27;, name))<br>    else<br>        vim.api.nvim_command(string.format(&#x27;FloatermNew --name=%s %s&#x27;, name, cmd))<br>    end<br>end<br></code></pre></td></tr></table></figure><h2 id="再次进阶-参考作者github配置"><a href="#再次进阶-参考作者github配置" class="headerlink" title="再次进阶 参考作者github配置"></a>再次进阶 参考作者github配置</h2><p><a href="https://github.com/yaocccc/nvim/blob/master/lua/pack/vim-floaterm.lua">https://github.com/yaocccc/nvim/blob/master/lua/pack/vim-floaterm.lua</a></p><p>实现特性:  </p><ol><li>不同快捷键为不同命令设定浮动窗口例如<br>- <F5> 按文件类型在浮动终端内实现执行<br>- <c-t> 打开终端<br>- <c-f> 打开ranger<br>- <c-b> 打开vim数据库可视化工具</li><li>再次按击其快捷键可进行hide&#x2F;show</li><li>当前已在某个窗口 例如ranger时，按击 <c-t>则切换到终端窗口 其他窗口同理</li></ol><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>见 :h floaterm</p>]]></content>
    
    
    
    <tags>
      
      <tag>VIM</tag>
      
      <tag>NVIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux优雅地在终端播放音乐——ncmpcpp</title>
    <link href="/ncmpcpp/"/>
    <url>/ncmpcpp/</url>
    
    <content type="html"><![CDATA[<h1 id="linux优雅地在终端播放音乐——ncmpcpp"><a href="#linux优雅地在终端播放音乐——ncmpcpp" class="headerlink" title="linux优雅地在终端播放音乐——ncmpcpp"></a>linux优雅地在终端播放音乐——ncmpcpp</h1><p><img src="/img/ncmpcpp/001.png" alt="show"></p><p>音乐播放后端(mpd——Music Player Daemon): <a href="https://github.com/MusicPlayerDaemon/MPD">https://github.com/MusicPlayerDaemon/MPD</a><br>音乐播放客户端(ncmpcpp): <a href="https://github.com/ncmpcpp/ncmpcpp">https://github.com/ncmpcpp/ncmpcpp</a>  </p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">直接用包管理工具安装即可 各大发行版都有包</span><br>yay -S mpd ncmpcpp<br></code></pre></td></tr></table></figure><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p><strong>配置MPD</strong></p><p>配置文件位置 ~&#x2F;.config&#x2F;mpd&#x2F;mpd.conf</p><details style="cursor: pointer; text-decoration:underline; color: #2AD;">  <summary>个人配置demo</summary>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">music_directory         &quot;~/Music&quot;<br>playlist_directory      &quot;~/.config/mpd/playlists&quot;<br>db_file                 &quot;~/.config/mpd/database&quot;<br>log_file                &quot;~/.config/mpd/log&quot;<br>pid_file                &quot;~/.config/mpd/pid&quot;<br>state_file              &quot;~/.config/mpd/state&quot;<br>bind_to_address         &quot;localhost&quot;<br>port                    &quot;6600&quot;<br>log_level               &quot;default&quot;<br>restore_paused          &quot;yes&quot;<br>auto_update             &quot;yes&quot;<br>auto_update_depth       &quot;4&quot;<br><br>audio_output &#123;<br>     type            &quot;pulse&quot;<br>     name            &quot;pulse audio&quot;<br>&#125;<br><br>audio_output &#123;<br>       type&quot;fifo&quot;<br>       name&quot;Visualizer feed&quot;<br>       path&quot;/tmp/mpd.fifo&quot;<br>       format&quot;44100:16:2&quot;<br>&#125;<br></code></pre></td></tr></table></figure></details><hr><p><strong>配置NCMPCPP</strong></p><p>配置位置 ~&#x2F;.config&#x2F;ncmpcpp&#x2F;config</p><details style="cursor: pointer; text-decoration:underline; color: #2AD;">  <summary>个人配置demo</summary>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ncmpcpp_directory = ~/.ncmpcpp<br>lyrics_directory = ~/.ncmpcpp/lyrics<br>mpd_music_dir = ~/Music<br><br>visualizer_in_stereo = &quot;no&quot;<br>visualizer_fifo_path = &quot;/tmp/mpd.fifo&quot;<br>visualizer_output_name = &quot;my_fifo&quot;<br>visualizer_sync_interval = &quot;10&quot;<br>visualizer_type = &quot;spectrum&quot; #spectrum/wave/wave_filled/ellipse<br><br>autocenter_mode = yes<br>message_delay_time = &quot;1&quot;<br>song_list_format = &quot;&#123;&#123;%a %t&#125;|&#123;%f&#125;&#125;&#123;$R%l&#125;&quot;<br>current_item_prefix = $b$7<br>current_item_inactive_column_prefix = $b$(white)$r<br>now_playing_prefix = &quot;$b$3&quot;<br>now_playing_suffix = &quot;$b$9&quot;<br>main_window_color = white<br>execute_on_song_change = notify-send &quot;♫ Now Playing&quot; &quot;$(mpc current)&quot;<br><br>playlist_display_mode = &quot;classic&quot;<br>user_interface = classic<br>header_visibility = &quot;no&quot;<br>statusbar_visibility = &quot;no&quot;<br>titles_visibility = &quot;no&quot;<br><br>mouse_support = &quot;yes&quot;<br><br>follow_now_playing_lyrics = yes<br>fetch_lyrics_for_current_song_in_background = yes<br><br>progressbar_look = &quot;▃▃ &quot;<br>progressbar_elapsed_color = &quot;magenta&quot;<br></code></pre></td></tr></table></figure></details><br><p>快捷键设置文件位置 ~&#x2F;.config&#x2F;ncmpcpp&#x2F;bindings</p><details style="cursor: pointer; text-decoration:underline; color: #2AD;">  <summary>个人配置demo</summary>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">def_key &quot;k&quot;<br>    scroll_up<br><br>def_key &quot;j&quot;<br>    scroll_down<br><br>def_key &quot;g&quot;<br>    page_up<br><br>def_key &quot;G&quot;<br>    page_down<br><br>def_key &quot;home&quot;<br>    move_home<br><br>def_key &quot;end&quot;<br>    move_end<br><br>def_key &quot;d&quot;<br>    delete_playlist_items<br><br>def_key &quot;delete&quot;<br>    delete_stored_playlist<br><br>def_key &quot;l&quot;<br>    next_column<br><br>def_key &quot;h&quot;<br>    previous_column<br><br>def_key &quot;tab&quot;<br>    next_screen<br><br>def_key &quot;L&quot;<br>    show_lyrics<br><br>def_key &quot;space&quot;<br>    pause<br><br>def_key &quot;t&quot;<br>    jump_to_playing_song<br><br>def_key &quot;s&quot;<br>    toggle_visualization_type<br></code></pre></td></tr></table></figure></details><h2 id="NCMPCPP使用简介"><a href="#NCMPCPP使用简介" class="headerlink" title="NCMPCPP使用简介"></a>NCMPCPP使用简介</h2><p>先启动mpd  </p><p>再启动ncmpcpp  </p><p>F1 可以看快捷键说明 大体上类似于vim快捷键  </p><p>1 2 3 4 5 6 7 8 &#x3D; 可以切换列表  </p><p>2 展示全部歌曲 按v反选全部歌曲 a添加到playlists，如果报错需要手动创建目录，q退出</p><h2 id="ENJOY"><a href="#ENJOY" class="headerlink" title="ENJOY"></a>ENJOY</h2>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>音乐播放器</tag>
      
      <tag>TUI</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>omz——追求极致终端体验 我封装了自己的oh my zsh</title>
    <link href="/omz/"/>
    <url>/omz/</url>
    
    <content type="html"><![CDATA[<h1 id="omz——追求极致终端体验-我封装了自己的oh-my-zsh"><a href="#omz——追求极致终端体验-我封装了自己的oh-my-zsh" class="headerlink" title="omz——追求极致终端体验 我封装了自己的oh my zsh"></a>omz——追求极致终端体验 我封装了自己的oh my zsh</h1><p><img src="/img/omz/show.gif" alt="show"></p><p>为了追求更极致终端体验，从bash切换到了zsh，并封装了自己的oh my zsh  </p><p>代码为oh my zsh的fork 深度精简 并 二次封装的版本  </p><p><a href="https://github.com/yaocccc/omz">仓库地址: https://github.com/yaocccc/omz</a>  </p><p>特点:  </p><ul><li>极快的启动速度 0.12s 左右</li><li>fork自oh my zsh并剔除绝大部分代码(仅保留不到180行代码)</li><li>弱水三千只取一瓢 仅保留5个高频使用的插件<ul><li>extract: 使用<code>extract</code>命令解压任意格式压缩文件</li><li>fzf-tab: 用<code>fzf</code>替换原生的tab补全选择 </li><li>z.lua: <code>z keyword</code> 命令快速跳转到常去目录</li><li>zsh-autosuggestions: 在终端建议可能输入的命令 <right>接受建议</li><li>zsh-syntax-highlighting: 高亮显示输入的命令</li></ul></li><li>支持fzf预览图片(x11相关终端内) 效果见标题下展示图</li><li>提供更好看的git日志展示 效果见标题下展示图</li><li>提供部分hook，例 启动时 自动进入上次进入的目录</li></ul><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">找一个地方<span class="hljs-built_in">clone</span>本仓库 例如 ~/.config</span><br>git clone https://github.com/yaocccc/omz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在你的zsh配置里 <span class="hljs-built_in">source</span> ~/.config/omz/omz.zsh (举例)</span><br>echo &quot;source ~/.config/omz/omz.zsh&quot; &gt;&gt; ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="REQUIRES"><a href="#REQUIRES" class="headerlink" title="REQUIRES"></a>REQUIRES</h2><ul><li>zsh</li><li>fzf</li><li>fd</li><li>bat (可选 更好的文本预览效果)</li><li>exa (可选 更好的目录预览效果)</li><li>ueberzug (可选 可在x11终端下预览图片)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">请自行安装fd<br>On macOS: brew install fd<br>On Arch Linux: pacman -S fd<br>On Ubuntu: apt install fd-find &amp;&amp; ln -s $(which fdfind)<br>On Debian: sudo apt-get install fd-find &amp;&amp; ln -s $(which fdfind) ~/.local/bin/fd<br><br>请自行安装fzf<br>git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf<br>~/.fzf/install<br></code></pre></td></tr></table></figure><h2 id="FILE-TREE"><a href="#FILE-TREE" class="headerlink" title="FILE TREE"></a>FILE TREE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">omz<br>  ├── cache/              -- 部分需要缓存的配置<br>  ├── lib/                -- 部分依赖文件<br>  │   ├── omz.sh          -- omz.sh<br>  │   ├── img_preview.sh  -- 图片预览脚本 for fzf<br>  │   └── file_preview.sh -- 文件预览脚本 for fzf<br>  ├── config/<br>  │   ├── fzf.zsh         -- fzf 及 fzf-tab配置<br>  │   ├── git.zsh         -- git相关配置<br>  │   ├── hook.zsh        -- 命令或启动钩子配置<br>  │   └── omz.zsh         -- omz基础配置<br>  ├── plugins/            -- 插件<br>  ├── themes/             -- 主题<br>  ├── omz.zsh             -- 配置入口<br>  └── README.md           -- README<br></code></pre></td></tr></table></figure><h2 id="CONFIGURATION"><a href="#CONFIGURATION" class="headerlink" title="CONFIGURATION"></a>CONFIGURATION</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 以下env如果需要请在source omz.zsh 前定义<br><br>_OMZ_APPLY_PREEXEC_HOOK<br>  是否允许OMZ开启&quot;命令发生前&quot;相关hook<br>  默认false<br>  行为:<br>    1. 执行命令前 将修改当前终端会话的title为: $cmd<br><br>_OMZ_APPLY_CHPWD_HOOK<br>  是否允许OMZ开启&quot;pwd变更后&quot;相关hook<br>  默认false<br>  行为:<br>    1. 载入时，会自动切换到上一次cd过的目录<br>    2. 发生cd命令时，自动记录当前cd的目录(在缓存文件中)<br></code></pre></td></tr></table></figure><h2 id="PLUGINS"><a href="#PLUGINS" class="headerlink" title="PLUGINS"></a>PLUGINS</h2><ol><li><p>z.lua</p><blockquote><p><code>z keyword</code><br>按使用频率跳转到keyword关联目录<br>例如 <code>z zsh</code> 可快速跳转到 <code>~/.config/zsh</code> 目录  </p></blockquote></li><li><p>extract  </p><blockquote><p><code>extract xxx</code><br>extract一个压缩文件<br>可根据不同压缩文件类型进行解压 无需记忆长解压指令  </p></blockquote></li><li><p>zsh-autosuggestions  </p><blockquote><p>输入命令时从history中找到最符合的命令<br>&lt;right&gt; 使用该 suggestion  </p></blockquote></li><li><p>zsh-syntax-highlighting  </p><blockquote><p>高亮输入命令  </p></blockquote></li><li><p>fzf-tab  </p><blockquote><p>tab时使用fzf进行候选选择  </p></blockquote></li><li><p>常用git命令支持(非插件)</p><blockquote><p><code>gco</code> &#x3D; <code>git checkout</code><br><code>gpo</code> &#x3D; <code>git push origin &lt;当前分支&gt;</code><br><code>gpl</code> &#x3D; <code>git pull origin &lt;当前分支&gt;</code><br><code>gd</code> &#x3D; <code>git diff</code><br><code>gs</code> &#x3D; <code>git status</code><br><code>gss</code> &#x3D; <code>更简洁的 git status</code><br><code>gam</code> &#x3D; <code>git add all 并 git commit -m &#39;内容&#39;</code>, e.g. <code>git commit update readme</code><br><code>gll</code> &#x3D; <code>简洁打印 git log</code>, 默认展示10条 若想展示更多 <code>gll 100</code><br><code>glll</code> &#x3D; <code>详细打印 git log</code>, 默认展示10条 若想展示更多 <code>glll 100</code>  </p><blockquote><p>展示 glll效果如下 PS: 实际使用带颜色 可自行根据 <a href="https://github.com/yaocccc/omz/blob/master/config/git.zsh">此文件:git.zsh</a> 内容配置对应颜色</p><p>$ glll<br>* e797da3 2022-12-14 15:18 user1: fix: 透传减轻下游负载<br>* ed8a8ba 2022-12-14 14:41 user1: fix: 查询时透传id<br>*   7c2799b 2022-12-13 19:04 user1: Merge branch ‘abc’ into ‘master’<br>|\<br>| * 3f2441b 2022-12-13 19:01 user1: fix: 修复安全隐患<br>|&#x2F;<br>*   70a46da 2022-12-13 18:27 user2: Merge branch ‘fix&#x2F;abcd’ into ‘master’</p></blockquote></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>ZSH</tag>
      
      <tag>TERMINAL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim-dadbod——在vim中可视化管理数据库</title>
    <link href="/vimdadbod/"/>
    <url>/vimdadbod/</url>
    
    <content type="html"><![CDATA[<h1 id="vim-dadbod——在vim中可视化管理数据库"><a href="#vim-dadbod——在vim中可视化管理数据库" class="headerlink" title="vim-dadbod——在vim中可视化管理数据库"></a>vim-dadbod——在vim中可视化管理数据库</h1><p><img src="/img/vimdadbod/001.png" alt="vimdadbod"></p><p> <strong>一个vim下 可视化操作多种数据库的 插件工具</strong></p><p><a href="https://github.com/tpope/vim-dadbod">github: tpope&#x2F;vim-dadbod</a><br><a href="https://github.com/kristijanhusak/vim-dadbod-ui">github: kristijanhusak&#x2F;vim-dadbod-ui</a></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">use &#123; &#x27;tpope/vim-dadbod&#x27; &#125;<br>use &#123; &#x27;kristijanhusak/vim-dadbod-ui&#x27;, after = &#x27;vim-dadbod&#x27; &#125;<br></code></pre></td></tr></table></figure><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">let g:dbs = [] 设定链接列表 不推荐 容易暴露敏感信息<br>let g:db_ui_save_location = &#x27;~/.config/dbui&#x27; 相关内容储存路径<br></code></pre></td></tr></table></figure><h2 id="布局和使用"><a href="#布局和使用" class="headerlink" title="布局和使用"></a>布局和使用</h2><p>左 filetype &#x3D; <code>dbui</code><br>右 filetype &#x3D; <code>sql</code><br>下 filetype &#x3D; <code>dbout</code>  </p><p>dbui:<br>  o &#x2F; &lt;cr&gt; - 打开&#x2F;关闭节点<br>  R - 刷新<br>  A - 添加链接 (格式见 <a href="https://github.com/kristijanhusak/vim-dadbod-ui">vim-dadbod-ui</a> 说明)  </p><p>  PS. 如果用户名、密码中有特殊符号 需要进行url encode</p><p>sql:<br>  &lt;leader&gt;W 保存当前query到文件</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>搭配 <code>coc-sql</code> <code>coc-db</code> 使用，可以对着db、表、字段级别补全</p>]]></content>
    
    
    
    <tags>
      
      <tag>VIM</tag>
      
      <tag>NVIM</tag>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用tree-sitter定制自己的nvim语法高亮</title>
    <link href="/treesitter/"/>
    <url>/treesitter/</url>
    
    <content type="html"><![CDATA[<h1 id="用tree-sitter定制自己的nvim语法高亮"><a href="#用tree-sitter定制自己的nvim语法高亮" class="headerlink" title="用tree-sitter定制自己的nvim语法高亮"></a>用tree-sitter定制自己的nvim语法高亮</h1><p><img src="/img/tree-sitter/001.png" alt="tree-sitter"></p><p>tree-sitter是一个增量语法分析工具，能够快速、高效地分析出文件对应语法树等等。</p><p>可基于此做vim&#x2F;nvim的语法高亮，文本对象等。</p><p><a href="https://tree-sitter.github.io/tree-sitter/">home: https://tree-sitter.github.io/tree-sitter/</a></p><p><a href="https://github.com/tree-sitter/tree-sitter">github: tree-sitter&#x2F;tree-sitter</a></p><h2 id="nvim-treesitter"><a href="#nvim-treesitter" class="headerlink" title="nvim-treesitter"></a>nvim-treesitter</h2><p>nvim关于treesitter的实现 注意vim无法使用 (使用了lua实现)</p><p><a href="https://github.com/nvim-treesitter/nvim-treesitter">github: nvim-treesitter&#x2F;nvim-treesitter</a></p><p>安装(以packer举例)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">use &#123; &#x27;nvim-treesitter/nvim-treesitter&#x27;, run = &#x27;:TSUpdate&#x27; &#125;<br></code></pre></td></tr></table></figure><h2 id="treesitter能做什么"><a href="#treesitter能做什么" class="headerlink" title="treesitter能做什么"></a>treesitter能做什么</h2><ul><li>语法树分析<ul><li>语法树</li><li>高亮</li><li>文本对象</li></ul></li></ul><h2 id="如何利用treesitter做语法高亮"><a href="#如何利用treesitter做语法高亮" class="headerlink" title="如何利用treesitter做语法高亮"></a>如何利用treesitter做语法高亮</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">use &#123; &#x27;nvim-treesitter/playground&#x27;, after = &#x27;nvim-treesitter&#x27; &#125;<br><br>:TSHighlightCapturesUnderCursor 查看光标下内容的高亮组 然后自己定义hi<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>VIM</tag>
      
      <tag>NVIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>coc尚能饭否: vim中最简单的lsp配置方法</title>
    <link href="/coc_nvim/"/>
    <url>/coc_nvim/</url>
    
    <content type="html"><![CDATA[<h1 id="征服补全？coc-nvim-不仅仅是补全"><a href="#征服补全？coc-nvim-不仅仅是补全" class="headerlink" title="征服补全？coc.nvim 不仅仅是补全"></a>征服补全？coc.nvim 不仅仅是补全</h1><p><img src="/img/coc_nvim/001.png" alt="coc"></p><p>Make your Vim&#x2F;Neovim as smart as VSCode</p><p>不仅仅是LSP，更已发展成了一套生态。<a href="https://github.com/neoclide/coc.nvim">coc.nvim</a></p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>依赖: nodejs &gt;&#x3D; 14.14</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">-- 使用包管理工具安装<br><br>use &#123; &#x27;neoclide/coc.nvim&#x27;, branch = &#x27;release&#x27; &#125;<br></code></pre></td></tr></table></figure><h2 id="安装-x2F-更新coc插件"><a href="#安装-x2F-更新coc插件" class="headerlink" title="安装&#x2F;更新coc插件"></a>安装&#x2F;更新coc插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">安装插件<br>  方法1: 配置 g:coc_global_extensions 自动安装<br>    let g:coc_global_extensions = [<br>          &#x27;coc-marketplace&#x27;,<br>          &#x27;@yaegassy/coc-volar&#x27;,<br>          &#x27;coc-tsserver&#x27;,<br>          &#x27;coc-json&#x27;,<br>          &#x27;coc-html&#x27;, &#x27;coc-css&#x27;,<br>          &#x27;coc-clangd&#x27;,<br>          &#x27;coc-go&#x27;,<br>          &#x27;coc-sumneko-lua&#x27;,<br>          &#x27;coc-vimlsp&#x27;,<br>          &#x27;coc-sh&#x27;, &#x27;coc-db&#x27;,<br>          &#x27;coc-java&#x27;, &#x27;coc-pyright&#x27;,<br>          &#x27;coc-toml&#x27;, &#x27;coc-solidity&#x27;,<br>          &#x27;coc-prettier&#x27;,<br>          &#x27;coc-snippets&#x27;, &#x27;coc-pairs&#x27;, &#x27;coc-word&#x27;,<br>          &#x27;coc-translator&#x27;,<br>          &#x27;coc-git&#x27;,<br>      ]<br><br>  方法2: CocInstall coc-xxx 手动安装<br><br>更新插件<br>  CocUpdate<br><br>去哪里找插件<br>  方法1: 安装 coc-marketplace 插件后，可用 CocList marketplace 在coclist中浏览<br>  方法2: 在npm仓库搜索coc开头的插件 https://www.npmjs.com/<br></code></pre></td></tr></table></figure><h2 id="coc的优势点-x2F-和-nvim-lsp-的比较"><a href="#coc的优势点-x2F-和-nvim-lsp-的比较" class="headerlink" title="coc的优势点 &#x2F; 和 nvim-lsp 的比较"></a>coc的优势点 &#x2F; 和 nvim-lsp 的比较</h2><ul><li><p>coc相对nvim-lsp更容易配置</p></li><li><p>coc目前有更丰富的插件</p></li><li><p>coc有统一的配置管理</p></li><li><p>nvim-lsp 需要安装比较多的包 一堆</p></li><li><p>nvim-lsp 一些lsp相关的ui实现依赖第三方</p></li><li><p>coc没有cmp-cmdline插件</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>VIM</tag>
      
      <tag>NVIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下将capslock键修改为esc</title>
    <link href="/capslocktoesc/"/>
    <url>/capslocktoesc/</url>
    
    <content type="html"><![CDATA[<h1 id="linux下将capslock键修改为esc"><a href="#linux下将capslock键修改为esc" class="headerlink" title="linux下将capslock键修改为esc"></a>linux下将capslock键修改为esc</h1><p>经常被capslock困扰，用着用着突然就变成大写然后还得去找这个按键 老实说这个按键真的鸡肋</p><p>干脆改成escape</p><h2 id="使用xmodmap的解决方案"><a href="#使用xmodmap的解决方案" class="headerlink" title="使用xmodmap的解决方案"></a>使用xmodmap的解决方案</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">解决方法1:<br>  vim ~/.xmodmap<br><br>  --<br>  remove Lock = Caps_Lock<br>  keysym Caps_Lock = Escape<br>  add Lock = Caps_Lock<br>  --<br><br>  xmodmap ~/.xmodmap<br><br>解决方法2:<br>  xmodmap -e &#x27;clear Lock&#x27; -e &#x27;keycode 0x42 = Escape&#x27;<br></code></pre></td></tr></table></figure><p>问题1: 启动输入法例如fcitx或更换键盘设备时 该配置会失效</p><p>解决: 在定时任务中经常执行 例如5分钟执行一次，不优雅 但实用</p><p>问题2: 若不小心切换到CapsLock状态，然后CapsLock又已被切换到Esc怎么恢复</p><p>解决: xmodmap -e ‘clear Lock’ -e ‘keycode 0x42 &#x3D; Caps_Lock’</p><h2 id="使用keyd的解决方案"><a href="#使用keyd的解决方案" class="headerlink" title="使用keyd的解决方案"></a>使用keyd的解决方案</h2><p><a href="https://github.com/rvaiya/keyd">github keyd</a></p><p>keyd 是一个管理键盘映射的工具，相对xmodmap更灵活 更易用，而且不再面临烦人的失效问题</p><p>在archlinux下如何使用keyd设置capslock 为 escape</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yay -S keyd<br>sudo systemctl enable keyd.service<br><br>/etc/keyd/default.conf 写入内容<br> <br>该配置文件可实现 capslock按住时表现为crtl，单次点击表现为esc<br><br>----------<br>[ids]<br><br>*<br><br>[main]<br><br>capslock = overload(control, esc)<br>----------<br><br>sudo systemctl restart keyd.service<br></code></pre></td></tr></table></figure><p>另还有更多配置可参考：<a href="https://github.com/rvaiya/keyd/blob/master/docs/keyd.scdoc">doc</a></p><hr><h1 id="FQ-CAPSLOCK"><a href="#FQ-CAPSLOCK" class="headerlink" title="FQ CAPSLOCK"></a>FQ CAPSLOCK</h1>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>ARCH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次archlinux安装和基础配置</title>
    <link href="/archinstall/"/>
    <url>/archinstall/</url>
    
    <content type="html"><![CDATA[<h1 id="archlinux-安装步骤"><a href="#archlinux-安装步骤" class="headerlink" title="archlinux 安装步骤"></a>archlinux 安装步骤</h1><hr><p>下载镜像制作启动盘 然后进入arch live进行安装系统</p><hr><h2 id="链接wifi"><a href="#链接wifi" class="headerlink" title="链接wifi"></a>链接wifi</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">rfkill unblock [网卡]                        # 软解网卡<br>ip link set [wifi设备] up                    # 启动网卡<br>wpa_passphrase [wifi名称] [wifi密码] &gt; wifi.conf # 写入wifi配置文件<br>wpa_supplicant -c wifi.conf -i &amp;             # 登录wifi<br>dhcpcd &amp;                                     # 动态ip分配<br><span class="hljs-meta prompt_"># </span><span class="language-bash">此时已可以上网 可以用ping baidu.com 验证</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">嫌麻烦可以直接用nmtui连接</span><br></code></pre></td></tr></table></figure><h2 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">cfdisk /dev/硬盘                             # 使用cfdisk工具分区、格式化、调整大小等<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">以三个盘举例</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">  /dev/nvme0n1p1 boot分区</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  /dev/nvme0n1p2 root分区</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  /dev/nvme0n1p3 swap分区</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">磁盘格式化以及开启swap</span><br>mkfs.fat -F32 /dev/nvme0n1p1<br>mkfs.ext4 /dev/nvme0n1p2<br>mkswap /dev/nvme0n1p3<br>swapon /dev/nvme0n1p3<br></code></pre></td></tr></table></figure><h2 id="安装基础包"><a href="#安装基础包" class="headerlink" title="安装基础包"></a>安装基础包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Sy archlinux-keyring                 # 安装这个可解决证书问题<br>pacstrap /mnt base base-devel linux linux-firmware<br></code></pre></td></tr></table></figure><h2 id="制作grub引导"><a href="#制作grub引导" class="headerlink" title="制作grub引导"></a>制作grub引导</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /mnt/boot<br>mount /dev/nvme0n1p1 /mnt/boot<br>mount /dev/nvme0n1p2 /mnt<br>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br>arch-chroot /mnt<br>pacman -S grub efibootmgr amd-ucode          # 如果是intel就装intel-ucode<br>mkdir /boot/grub<br>grub-mkconfig &gt; /boot/grub/grub.cfg<br>grub-install --target=x86_64-efi --efi-directory=/boot<br><br>事后可设置 /etc/default/grub 中 可提升启动速度<br>GRUB_CMDLINE_LINUX_DEFAULT=&quot;loglevel=3 nowatchdog&quot;<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd<br>useradd -m -G wheel [用户名]<br>passwd [用户名]<br>pacman -S netmanager dhcpcd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">本地化 一些自定义设置</span><br>vim /etc/locale.gen -&gt; zh_CN.UTF-8 UTF-8<br>locale-gen<br>vim /etc/locale.conf -&gt; LANG=zh_CN.UTF-8<br>timedatectl set-timezone Asia/Shanghai<br></code></pre></td></tr></table></figure><hr><p>此时已可以重启正常进入系统tty了</p><hr><h2 id="配置archcn-安装yay等"><a href="#配置archcn-安装yay等" class="headerlink" title="配置archcn 安装yay等"></a>配置archcn 安装yay等</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/pacman.conf 尾部添加<br><br>[archlinuxcn]<br>SigLevel = Never<br>Server = https://mirrors.ustc.edu.cn/$repo/$arch<br><br>顺便开启<br>[multilib]<br>Include = /etc/pacman.d/mirrorlist<br><br>sudo pacman -Syyu<br>sudo pacman -S yay<br></code></pre></td></tr></table></figure><h2 id="安装gui"><a href="#安装gui" class="headerlink" title="安装gui"></a>安装gui</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 安装git和xorg和字体<br>yay -S git<br>yay -S xorg<br>yay -S wqy-microhei<br>yay -S wps-office-mui-zh-cn<br>yay -S ttf-wps-fonts<br>yay -S nerd-fonts-jetbrains-mono<br>yay -S ttf-material-design-icons<br>yay -S ttf-joypixels<br>yay -S ttf-dejavu<br><br>mkdir ~/workspace<br>cd ~/workspace<br>git clone https://github.com/yaocccc/dwm<br>git clone https://github.com/yaocccc/st<br>cd dwm &amp;&amp; sudo make install clean<br>cd st &amp;&amp; sudo make install clean<br><br>echo exec dwm &gt; ~/.xinitrc<br>startx # 进入系统<br></code></pre></td></tr></table></figure><hr><p>此时已可以重启正常进入系统gui了</p><p>接下来设置一些日常使用的内容</p><hr><h2 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S fcitx5 fcitx5-qt fcitx5-gtk fcitx5-config-qt fcitx5-material-color fcitx5-im fcitx5-rime<br>sudo echo &#x27;<br>GTK_IM_MODULE=fcitx<br>QT_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>SDL_IM_MODULE=fcitx<br>GLFW_IM_MODULE=ibus&#x27; &gt;&gt; /etc/environment<br></code></pre></td></tr></table></figure><h2 id="触控板轻触-避免打字时误触-自然滚动"><a href="#触控板轻触-避免打字时误触-自然滚动" class="headerlink" title="触控板轻触 避免打字时误触 自然滚动"></a>触控板轻触 避免打字时误触 自然滚动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo cp /usr/share/X11/xorg.conf.d/40-libinput.conf /etc/X11/xorg.conf.d<br><br>/etc/X11/xorg.conf.d/40-libinput.conf<br><br># 找到touchpad的配置 添加 `Option &quot;Tapping&quot; &quot;on&quot;`<br><br>Section &quot;InputClass&quot;<br>        Identifier &quot;libinput touchpad catchall&quot;<br>        MatchIsTouchpad &quot;on&quot;<br>        Option &quot;Tapping&quot; &quot;on&quot;<br>        Option &quot;NaturalScrolling&quot; &quot;true&quot;<br>        MatchDevicePath &quot;/dev/input/event*&quot;<br>        Driver &quot;libinput&quot;<br>EndSection<br></code></pre></td></tr></table></figure><h2 id="配置系统锁屏和关机时间"><a href="#配置系统锁屏和关机时间" class="headerlink" title="配置系统锁屏和关机时间"></a>配置系统锁屏和关机时间</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/etc/X11/xorg.conf.d/10-monitor.conf<br><br>Section &quot;ServerLayout&quot;<br>    Identifier &quot;ServerLayout0&quot;<br>    Option &quot;BlankTime&quot;  &quot;10&quot;   # 自动锁屏<br>    Option &quot;StandbyTime&quot; &quot;20&quot;   # 关闭屏幕<br>    Option &quot;SuspendTime&quot; &quot;30&quot;   # 挂起<br>    Option &quot;OffTime&quot; &quot;60&quot;       # 关机<br>EndSection<br></code></pre></td></tr></table></figure><h2 id="音频和蓝牙"><a href="#音频和蓝牙" class="headerlink" title="音频和蓝牙"></a>音频和蓝牙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S pipewire-pulse<br>sudo pacman -S pavucontrol<br>sudo pacman -S bluez bluez-utils bluedevil # bluedevil 为gui蓝牙管理<br>pactl load-module module-bluetooth-discover<br><br>sudo vim /etc/bluetooth/main.conf<br>FastConnectable=true<br>AutoEnable=true<br></code></pre></td></tr></table></figure><h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">run v2raya</span><br>docker run -d \<br>  --privileged \<br>  --network=host \<br>  --name v2raya \<br>  -e V2RAYA_ADDRESS=0.0.0.0:2017 \<br>  -v /lib/modules:/lib/modules \<br>  -v /etc/resolv.conf:/etc/resolv.conf \<br>  -v /etc/v2raya:/etc/v2raya \<br>  mzz2017/v2raya<br></code></pre></td></tr></table></figure><h2 id="tty免登录"><a href="#tty免登录" class="headerlink" title="tty免登录"></a>tty免登录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/systemd/system/getty.target.wants/getty@tty1.service<br><br>update<br>  ExecStart=-/sbin/agetty -o &#x27;-p -f [用户名]&#x27; -n -a chenyc --noclear %I $TERM<br><br>sudo免密 加到 visudo 添加到尾部<br>[用户名] ALL=(ALL:ALL) NOPASSWD: ALL<br><br>用户提权<br>yay -S polkit<br></code></pre></td></tr></table></figure><h2 id="开启hibernate"><a href="#开启hibernate" class="headerlink" title="开启hibernate"></a>开启hibernate</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1. 确保已经有swap<br>2. /etc/default/grub, GRUB_CMDLINE_LINUX_DEFAULT 添加 resume=/dev/nvme0n1p3<br>3. /etc/mkinitcpio.conf, HOOKS添加resume，resume放在udev之后，如果有lvm，放在lvm之后<br>4. /etc/systemd/logind.conf, 按下电源键进入休眠 合盖挂起 半小时后休眠<br>  HandlePowerKey=hibernate<br>  HandleLidSwitch=suspend-then-hibernate<br>  HandleLidSwitchDocked=suspend-then-hibernate<br>  HibernateDelaySec=30min<br>5. sudo grub-mkconfig -o /boot/grub/grub.cfg<br>6. sudo mkinitcpio -p linux<br></code></pre></td></tr></table></figure><h2 id="永久去除蜂鸣器声音"><a href="#永久去除蜂鸣器声音" class="headerlink" title="永久去除蜂鸣器声音"></a>永久去除蜂鸣器声音</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo su<br>mkdir -p /etc/rc.d<br>echo &quot;rmmod pcspkr&quot; &gt;&gt; /etc/rc.d/rc.local<br>chmod  +x /etc/rc.d/rc.local<br></code></pre></td></tr></table></figure><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo pacman -S ntp<br>sudo ntpdate ntp.aliyun.com<br>sudo hwclock -w<br></code></pre></td></tr></table></figure><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu升级nvim<br>apt-add-repository ppa:neovim-ppa/unstable<br>nodejs:<br>  git clone https://github.com/nvm-sh/nvm.git .nvm<br>  nvm install 17.1.0<br>golang:<br>  官网下载tar包，配置 GOROOT GOBIN等<br>docker:<br>  yay -S docker<br>  sudo vi /etc/docker/daemon.json<br>  &#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]<br>  &#125;<br>  sudo systemctl daemon-reload<br>  sudo systemctl start docker<br>  sudo systemctl enable docker<br>  sudo docker pull redis<br>  sudo docker pull mysql<br>  sudo docker pull docker.elastic.co/elasticsearch/elasticsearch:7.3.0<br>  sudo docker pull rabbitmq:3.7.7-management<br>  sudo docker pull mongo<br>  sudo docker network create esnet<br>  sudo docker run -d -p 9200:9200 -p 9300:9300 --name esApp --network esnet -e &quot;discovery.type=single-node&quot; bdaab402b220<br>  sudo docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmqApp -v ~/.data/rabbitmq:/var/lib/rabbitmq --hostname myRabbit 2888deb59dfc<br>  sudo docker run -d -p 27017:27017 --name mongoApp mongo<br>  sudo docker run -d --network=host --name redisApp redis --requirepass 123456<br>  sudo docker run -d --network=host --name mysqlApp -e MYSQL_ROOT_PASSWORD=123456 mysql<br>  mysql -h 172.17.0.1 -u root -p123456<br>  ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br>  FLUSH PRIVILEGES;<br><br>  sudo docker run --network=host --name mysqlApp \<br>    -v /usr/local/docker/mysql/conf:/etc/mysql \<br>    -v /usr/local/docker/mysql/logs:/var/log/mysql \<br>    -v /usr/local/docker/mysql/data:/var/lib/mysql \<br>    -e MYSQL_ROOT_PASSWORD=123456 \<br>    -d mysql:5.7<br></code></pre></td></tr></table></figure><h2 id="日常软件"><a href="#日常软件" class="headerlink" title="日常软件"></a>日常软件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S lxappearance              # gui设置<br>yay -S paper-gtk-theme-git       # gtk主题<br>yay -S pavucontrol               # 音频设置<br>yay -S breeze-icons              # 图标<br>yay -S rofi                      # 菜单<br>yay -S flameshot                 # 截图软件<br>yay -S google-chrome wyeb-git    # 浏览器             <br>yay -S byzanz                    # gif截图依赖<br>yay -S wps-office-cn             # wps<br>yay -S libnotify dunst           # 通知 可使用 dunst -b 命令 启动通知服务<br>yay -S xorg-xsetroot             # dwm设置状态栏<br>yay -S xf86-input-synaptics      # 触控板<br>yay -S network-manager-applet    # 网络托盘<br>yay -S amf-amdgpu-pro            # amd gpu 驱动<br>yay -S obs-studio-amf            # obs for amd_gpu<br>yay -S mpc mpd ncmpcpp           # tui music player<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>ARCH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于lua的nvim插件管理工具 packer.nvim</title>
    <link href="/packernvim/"/>
    <url>/packernvim/</url>
    
    <content type="html"><![CDATA[<h2 id="基于lua的nvim插件管理工具-packer-nvim"><a href="#基于lua的nvim插件管理工具-packer-nvim" class="headerlink" title="基于lua的nvim插件管理工具 packer.nvim"></a>基于lua的nvim插件管理工具 packer.nvim</h2><p>用于用于安装、更新、管理nvim插件的管理工具</p><ol><li>由lua实现</li><li>懒加载</li><li>更快的速度(异步)</li><li>解决依赖间加载问题</li></ol><h2 id="基础安装"><a href="#基础安装" class="headerlink" title="基础安装"></a>基础安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git clone --depth 1 https://github.com/wbthomason/packer.nvim \<br>  ~/.local/share/nvim/site/pack/packer/start/packer.nvim<br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">PackerCompile<br>PackerSync<br></code></pre></td></tr></table></figure><h2 id="配置demo"><a href="#配置demo" class="headerlink" title="配置demo"></a>配置demo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">-- lua/packinit.lua<br>return require(&#x27;packer&#x27;).startup(function(use)<br>  use &#123;&quot;demo&quot;&#125;<br>end)<br></code></pre></td></tr></table></figure><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>即实现部分插件延后载入 主要由 event 和 cmd 实现</p><p>务必知悉</p><p>use { ‘xxx’, setup&#x3D;”require(‘xxx’).setup()”, config&#x3D;”require(‘xxx’).config()” } – setup发生在载入插件前 config发生在载入插件后</p>]]></content>
    
    
    
    <tags>
      
      <tag>NVIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器内运行linux系统，并通过vnc暴露图形化界面</title>
    <link href="/dockerlinuxvnc/"/>
    <url>/dockerlinuxvnc/</url>
    
    <content type="html"><![CDATA[<h2 id="DOCKER容器运行linux系统-并暴露vnc图形化界面"><a href="#DOCKER容器运行linux系统-并暴露vnc图形化界面" class="headerlink" title="DOCKER容器运行linux系统 并暴露vnc图形化界面"></a>DOCKER容器运行linux系统 并暴露vnc图形化界面</h2><p><img src="/img/docker/gui.png" alt="show"></p><p>可观看bilibili视频 <a href="https://www.bilibili.com/video/BV1Ra411o7yq/">BV1Ra411o7yq</a></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>docker运行linux系统 已archlinux举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker run -it -p 5901:5901 --name arch arch<br></code></pre></td></tr></table></figure><p>此处的-p 5901:5901 是暴露docker容器的5901端口到本地 5901 为vncserver :1 对应的端口</p><h2 id="初始化archlinux相关的环境和包"><a href="#初始化archlinux相关的环境和包" class="headerlink" title="初始化archlinux相关的环境和包"></a>初始化archlinux相关的环境和包</h2><p>初始化archlinuxcn源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &#x27;<br>[archlinuxcn]<br>SigLevel = Never<br>Include = /etc/pacman.d/cnmirrorlist&#x27; &gt;&gt; /etc/pacman.conf<br>echo &#x27;Server = https://mirrors.ustc.edu.cn/$repo/$arch<br>Server = https://mirrors.tuna.tsinghua.edu.cn/$repo/$arch&#x27; &gt;&gt; /etc/pacman.d/cnmirrorlist<br></code></pre></td></tr></table></figure><p>安装基础包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pacman -Sy<br>pacman -S yay<br>yay -S xorg make gcc vim git<br>yay -S nerd-fonts-jetbrains-mono<br>yay -S ttf-material-design-icons<br>yay -S ttf-joypixels<br>yay -S wqy-microhei<br></code></pre></td></tr></table></figure><h2 id="安装图形画界面并开启vnc服务"><a href="#安装图形画界面并开启vnc服务" class="headerlink" title="安装图形画界面并开启vnc服务"></a>安装图形画界面并开启vnc服务</h2><p>安装图形化界面 以dwm举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd ~/dwm<br>make install<br></code></pre></td></tr></table></figure><p>安装并配置vncserver</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yay -S tigervnc<br>vncpasswd<br>echo &#x27;session=dwm&#x27; &gt;&gt; ~/.vnc/config<br>mkdir -p /usr/share/xsessions<br>echo &#x27;[Desktop Entry]<br>Encoding=UTF-8<br>Name=Dwm<br>Comment=Dynamic window manager<br>Exec=dwm<br>Icon=dwm<br>Type=XSession&#x27; &gt; /usr/share/xsessions/dwm.desktop<br><br># 启动命令<br>vncserver :1<br><br># 也可以在docker外运行这个命令<br>docker exec -u root -d arch bash -c &#x27;/usr/sbin/vncserver :1&#x27;<br></code></pre></td></tr></table></figure><h2 id="在自己本地的电脑上访问"><a href="#在自己本地的电脑上访问" class="headerlink" title="在自己本地的电脑上访问"></a>在自己本地的电脑上访问</h2><p>也安装tigervnc 然后运行vncviwer即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>VNC</tag>
      
      <tag>DOCKER</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dwm简介和如何安装使用</title>
    <link href="/dwmido/"/>
    <url>/dwmido/</url>
    
    <content type="html"><![CDATA[<h2 id="DWM"><a href="#DWM" class="headerlink" title="DWM"></a>DWM</h2><p><a href="https://www.bilibili.com/video/BV1Ef4y1Z7kA/">DWM系列1——个人向DWM、arch linux展示</a></p><p><a href="https://www.bilibili.com/video/BV1jN4y1u7ui/">DWM系列2——我为什么使用dwm、dwm初体验(最简化安装)</a></p><h3 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h3><p><a href="https://dwm.suckless.org/">dwm</a></p><p>dynamic window manager</p><p>是X上的一个动态窗口管理器</p><h3 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h3><p>轻、自定义、无限可能性</p><h3 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h3><ol><li><p>安装xserver环境(如果你未安装图形化环境的话)</p><p> <code>sudo pacman -S xorg-xinit</code></p></li><li><p>克隆源码</p><p> <code>git clone https://git.suckless.org/dwm</code></p></li><li><p>make</p><p> <code>sudo make clean install</code></p></li><li><p>修改 ~&#x2F;.xinitrc</p><p> <code>exec dwm</code></p></li><li><p>从tty进入 dwm</p><p> <code>startx</code></p></li></ol><h3 id="装的字体"><a href="#装的字体" class="headerlink" title="装的字体"></a>装的字体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yay -S wqy-microhei<br>yay -S wps-office-mui-zh-cn<br>yay -S ttf-wps-fonts<br>yay -S nerd-fonts-jetbrains-mono<br>yay -S ttf-material-design-icons<br>yay -S ttf-joypixels<br>yay -S ttf-dejavu<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>DWM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适合arch linux的qq、微信、企业微信</title>
    <link href="/archwine/"/>
    <url>/archwine/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#%E9%80%82%E5%90%88arch-linux%E7%9A%84qq%E5%BE%AE%E4%BF%A1%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1">适合arch linux的qq、微信、企业微信</a></li><li><a href="#%E8%A3%85%E5%AE%8C%E5%90%8E%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">装完后可能会遇到的问题</a></li><li><a href="#%E5%9B%BA%E5%AE%9A%E5%AF%B9%E5%BA%94%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%9A%84%E7%89%88%E6%9C%AC">固定对应软件包的版本</a></li><li><a href="#%E9%99%8D%E7%BA%A7%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E7%89%88%E6%9C%AC%E5%8C%85">降级到指定的版本包</a></li></ul><!-- markdown-toc --><h2 id="适合arch-linux的qq、微信、企业微信"><a href="#适合arch-linux的qq、微信、企业微信" class="headerlink" title="适合arch linux的qq、微信、企业微信"></a>适合arch linux的qq、微信、企业微信</h2><p><a href="https://www.bilibili.com/video/BV1Z3411F7TL/">arch linux 使用 qq、微信、企业微信 踩坑向</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yay -S com.qq.tim.spark<br>yay -S deepin-wine-wechat<br>yay -S com.qq.weixin.work.deepin<br></code></pre></td></tr></table></figure><h2 id="装完后可能会遇到的问题"><a href="#装完后可能会遇到的问题" class="headerlink" title="装完后可能会遇到的问题"></a>装完后可能会遇到的问题</h2><ol><li><p>微信聊天窗口中的字体变成方块<br> <code>cp WeiRuanYaHei-1.ttf ~/.deepinwine/xxx/drive_c/windows/Fonts</code><br> 这里的xxx是对应的软件目录<br> <a href="/file/WeiRuanYaHei-1.ttf">文件下载地址</a></p></li><li><p>窗口周围出现奇怪的黑色或透明边框 只需要修改  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/opt/apps/xxx/files/run.sh 中的 <br>export APPRUN_CMD=&quot;deepin-wine6-stable&quot;<br>变更为<br>export APPRUN_CMD=&quot;deepin-wine5&quot;<br></code></pre></td></tr></table></figure><p> 这里的xxx是对应的软件目录  </p></li><li><p>TIM启动后无法显示图片<br> sudo -S sysctl -w net.ipv6.conf.all.disable_ipv6&#x3D;1</p></li></ol><h2 id="固定对应软件包的版本"><a href="#固定对应软件包的版本" class="headerlink" title="固定对应软件包的版本"></a>固定对应软件包的版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">编辑 /etc/pacman.conf<br><br>IgnorePkg = com.qq.weixin.work.deepin deepin-wine-wechat com.qq.tim.spark<br></code></pre></td></tr></table></figure><h2 id="降级到指定的版本包"><a href="#降级到指定的版本包" class="headerlink" title="降级到指定的版本包"></a>降级到指定的版本包</h2><p>找到包文件</p><p>用sudo pacman -U pkg.xx.xx 命令安装</p>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>DWM</tag>
      
      <tag>WINE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux丝滑的动画体验</title>
    <link href="/linuxpicomanimation/"/>
    <url>/linuxpicomanimation/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#picom">picom</a></li><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E5%90%AF%E5%8A%A8">启动</a></li><li><a href="#%E4%B8%BA%E4%BA%86%E6%9B%B4%E6%9B%B4%E6%96%B9%E4%BE%BF%E5%A4%A7%E5%AE%B6%E5%AE%89%E8%A3%85-%E6%88%91%E4%BB%8E%E5%88%AB%E4%BA%BA%E9%82%A3%E6%8A%84%E4%BA%86pkgbuild">为了更更方便大家安装 我从别人那抄了pkgbuild</a></li></ul><!-- markdown-toc --><h2 id="picom"><a href="#picom" class="headerlink" title="picom"></a>picom</h2><p><a href="https://www.bilibili.com/video/bv19T411G7Eq">视频链接</a></p><p>xserver的窗口效果合成器, fork自 compton</p><p>提供了窗口的透明、背景模糊、淡入淡出、圆角、动画等效果</p><p><a href="https://github.com/yshui/picom">github仓库</a> | <a href="https://github.com/yaocccc/picom">个人fork版本</a></p><p><a href="https://github.com/yaocccc/scripts/blob/master/config/picom.conf">个人自用配置</a></p><p>个人fork的版本修改了什么？</p><p>在dccsillag&#x2F;picom实现动画效果的基础上，增加了两个动画相关的配置 <a href="https://github.com/dccsillag/picom/pull/35">PR#35</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>从仓库clone到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd picom<br><br>rm -rf build<br>LDFLAGS=&quot;-L/usr/local/lib&quot; CPPFLAGS=&quot;-I/usr/local/include&quot; meson --buildtype=release . build<br>ninja -C build<br>sudo ninja -C build install<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>picom --experimental-backends --config ~/scripts/config/picom.conf</code></p><h2 id="为了更更方便大家安装-我从别人那抄了pkgbuild"><a href="#为了更更方便大家安装-我从别人那抄了pkgbuild" class="headerlink" title="为了更更方便大家安装 我从别人那抄了pkgbuild"></a>为了更更方便大家安装 我从别人那抄了pkgbuild</h2><ul><li>将以下内容写入PKGBUILD文件</li><li>执行makepkg -si</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">_forkname=yaocccc<br>pkgname=picom-animations-git<br>_gitname=picom<br>pkgver=1786__2022.09.19<br>pkgrel=1<br>pkgdesc=&quot;X compositor (fork of compton) (git-version; animation fork)&quot;<br>arch=(i686 x86_64)<br>url=&quot;https://github.com/$&#123;_forkname&#125;/$&#123;_gitname&#125;&quot;<br>license=(&#x27;MIT&#x27; &#x27;MPL2&#x27;)<br>depends=(&#x27;libgl&#x27; &#x27;libev&#x27; &#x27;pcre&#x27; &#x27;libx11&#x27; &#x27;xcb-util-renderutil&#x27; &#x27;libxcb&#x27; &#x27;xcb-util-image&#x27; &#x27;libxext&#x27;<br>         &#x27;pixman&#x27; &#x27;libconfig&#x27; &#x27;libdbus&#x27; &#x27;hicolor-icon-theme&#x27;)<br>makedepends=(&#x27;git&#x27; &#x27;mesa&#x27; &#x27;meson&#x27; &#x27;asciidoc&#x27; &#x27;uthash&#x27; &#x27;xorgproto&#x27;)<br>optdepends=(&#x27;dbus:          To control picom via D-Bus&#x27;<br>            &#x27;xorg-xwininfo: For picom-trans&#x27;<br>            &#x27;xorg-xprop:    For picom-trans&#x27;<br>            &#x27;python:        For picom-convgen.py&#x27;)<br>provides=(&#x27;compton&#x27; &#x27;compton-git&#x27; &#x27;picom&#x27;)<br>conflicts=(&#x27;compton&#x27; &#x27;compton-git&#x27; &#x27;picom&#x27;)<br>replaces=(&#x27;compton-git&#x27;)<br>source=(git+&quot;https://github.com/$&#123;_forkname&#125;/$&#123;_gitname&#125;.git&quot;)<br>sha256sums=(&quot;SKIP&quot;)<br><br>pkgver() &#123;<br>    cd $&#123;_gitname&#125;<br>    _tag=$(git describe --tags | sed &#x27;s:^v::&#x27;) # tag is mobile, and switches between numbers and letters, can&#x27;t use it for versioning<br>    _commits=$(git rev-list --count HEAD) # total commits is the most sane way of getting incremental pkgver<br>    _date=$(git log -1 --date=short --pretty=format:%cd)<br>    printf &quot;%s_%s_%s\n&quot; &quot;$&#123;_commits&#125;&quot; &quot;$&#123;_tag&#125;&quot; &quot;$&#123;_date&#125;&quot; | sed &#x27;s/-/./g&#x27;<br>&#125;<br><br>build() &#123;<br>  cd &quot;$&#123;srcdir&#125;/$&#123;_gitname&#125;&quot;<br>  meson --buildtype=release . build --prefix=/usr -Dwith_docs=true<br>  ninja -C build<br>&#125;<br><br>package() &#123;<br>  cd &quot;$&#123;srcdir&#125;/$&#123;_gitname&#125;&quot;<br><br>  DESTDIR=&quot;$&#123;pkgdir&#125;&quot; ninja -C build install<br><br>  # install license<br>  install -D -m644 &quot;LICENSES/MIT&quot; &quot;$&#123;pkgdir&#125;/usr/share/licenses/$&#123;pkgname&#125;/LICENSE-MIT&quot;<br><br>  # example conf<br>  install -D -m644 &quot;picom.sample.conf&quot; &quot;$&#123;pkgdir&#125;/etc/xdg/picom.conf.example&quot;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>桌面美化</tag>
      
      <tag>PICOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rofi实现自定义菜单选项和操作、像fzf一样使用rofi</title>
    <link href="/rofimenu/"/>
    <url>/rofimenu/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#rofi">ROFI</a></li><li><a href="#%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0-rofi%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95%E5%92%8C%E9%80%89%E9%A1%B9">用自定义脚本实现 rofi自定义菜单和选项</a></li><li><a href="#rofi-dmenu%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8">rofi dmenu模式的使用</a></li><li><a href="#%E8%87%AA%E7%94%A8%E7%9A%84rofi%E4%B8%BB%E9%A2%98">自用的rofi主题</a></li></ul><!-- markdown-toc --><h2 id="ROFI"><a href="#ROFI" class="headerlink" title="ROFI"></a>ROFI</h2><p>可观看bilibili视频 <a href="https://www.bilibili.com/video/BV1ag411Q7Po/">BV1ag411Q7Po</a></p><p>rofi–一个窗口切换器、应用启动器、dmenu的替代品</p><p><a href="https://github.com/davatorium/rofi#modes">git仓库</a></p><h2 id="用自定义脚本实现-rofi自定义菜单和选项"><a href="#用自定义脚本实现-rofi自定义菜单和选项" class="headerlink" title="用自定义脚本实现 rofi自定义菜单和选项"></a>用自定义脚本实现 rofi自定义菜单和选项</h2><p>自己自定义菜单项 和 选中后的操作</p><p><a href="https://github.com/davatorium/rofi/blob/next/doc/rofi-script.5.markdown">自定义脚本</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rofi -show 自定义 -modi &quot;自定义:~/rofi.sh&quot;<br>  1: 上述命令可调用rofi.sh作为自定义脚本<br>  2: 将打印的内容作为rofi的选项<br>  3: 每次选中后 会用选中项作为入参再次调用脚本<br>  4: 当没有输出时 整个过程结束<br></code></pre></td></tr></table></figure><p>demo脚本:</p><p>编辑~&#x2F;rofi.sh 以下内容并chmod +x rofi.sh</p><p>终端执行 <code>rofi -show powermenu -modi &quot;powermenu:~/rofi.sh&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">case &quot;$*&quot; in<br>    &quot;poweroff&quot;) <br>        notify-send &quot;Shutting down&quot;<br>        echo yes<br>        echo no<br>        ;;<br>    &quot;reboot&quot;)<br>        notify-send &quot;reboot&quot;<br>        ;;<br>    &quot;lock&quot;)<br>        notify-send &quot;lock&quot;<br>        ;;<br><br>    &quot;yes&quot;)<br>        notify-send &quot;已触发关机&quot;<br>        ;;<br>    &quot;&quot;)<br>        echo poweroff<br>        echo reboot<br>        echo lock<br>        ;;<br>esac<br></code></pre></td></tr></table></figure><h2 id="rofi-dmenu模式的使用"><a href="#rofi-dmenu模式的使用" class="headerlink" title="rofi dmenu模式的使用"></a>rofi dmenu模式的使用</h2><p><a href="https://github.com/davatorium/rofi/blob/next/doc/rofi-dmenu.5.markdown">dmenu</a></p><p>demo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">file=$(ls | rofi -dmenu -window-title find)<br>echo $file<br></code></pre></td></tr></table></figure><h2 id="自用的rofi主题"><a href="#自用的rofi主题" class="headerlink" title="自用的rofi主题"></a>自用的rofi主题</h2><p>config.rasi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">configuration &#123;<br>    theme: &quot;mine.rasi&quot;;<br>&#125;<br></code></pre></td></tr></table></figure><p>mine.rasi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">configuration &#123;<br>  display-drun: &quot;&quot;;<br>  display-window: &quot;&quot;;<br>  display-windowcd: &quot;&quot;;<br>  display-ssh: &quot;&quot;;<br>  display-run: &quot;﮸&quot;;<br>  show-icons: false;<br>  drun-display-format: &quot;&#123;icon&#125; &#123;name&#125; &#123;comment&#125;&quot;;<br>&#125;<br><br>* &#123;<br>  font: &quot;JetBrainsMono Nerd Font Mono 12.5&quot;;<br>  background-color: transparent;<br>  text-color: #f1f1f1;<br>  width: 680px;<br>  height: 300px;<br>  location: 0;<br>  spacing: 0;<br>  transparent: rgba(34,62,79,0.80);<br>&#125;<br><br>window &#123;<br>    location: center;<br>    anchor:   center;<br><br>    background-color:@transparent;<br>    spacing: 0;<br>    children:  [mainbox];<br>    orientation: horizontal;<br>&#125;<br><br>inputbar &#123;<br>  border: 0 0 1px 0;<br>  children: [prompt,entry];<br>&#125;<br><br>prompt &#123;<br>  padding: 0px 13px 0px 13px;<br>  border: 0 1px 0 0;<br>  vertical-align: 0.5;<br>&#125;<br><br>textbox &#123;<br>  background-color:@transparent;<br>  border: 0 0 1px 0;<br>  border-color: #161B1A;<br>  padding: 8px 13px;<br><br>&#125;<br><br>entry &#123;<br>  padding: 13px;<br>&#125;<br><br>listview &#123;<br>  cycle: false;<br>  margin: 0 0 -1px 0;<br>  scrollbar: false;<br>&#125;<br><br>element &#123;<br>  border: 0 0 1px 0;<br>  padding: 4px;<br>&#125;<br><br>element-text &#123;<br>  expand: true;<br>  vertical-align: 0.5;<br>  padding: 0px 13px;<br>&#125;<br><br>element selected &#123;<br>  background-color: rgba(34,82,99);<br>&#125;<br><br>element-icon &#123;<br>    size: 30px;<br>    border: 0px;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>DWM</tag>
      
      <tag>ROFI</tag>
      
      <tag>桌面美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim宏操作</title>
    <link href="/vimmacro/"/>
    <url>/vimmacro/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#vim%E5%AE%8F%E6%93%8D%E4%BD%9C">vim宏操作</a></li><li><a href="#%E5%BC%80%E5%A7%8B%E5%BD%95%E5%88%B6%E5%AE%8F">开始录制宏</a></li><li><a href="#%E7%BB%93%E6%9D%9F%E5%BD%95%E5%88%B6%E5%AE%8F">结束录制宏</a></li><li><a href="#%E8%B0%83%E7%94%A8%E5%BD%95%E5%88%B6%E5%AE%8C%E6%88%90%E7%9A%84%E5%AE%8F">调用录制完成的宏</a></li><li><a href="#demo">DEMO</a></li><li><a href="#gif%E6%BC%94%E7%A4%BA">GIF演示</a></li></ul><!-- markdown-toc --><h2 id="vim宏操作"><a href="#vim宏操作" class="headerlink" title="vim宏操作"></a>vim宏操作</h2><p><a href="https://www.bilibili.com/video/BV1uF411c7Ro/">vim宏操作和多光标插件</a></p><blockquote><p><strong>建议看完本文的相关文字说明后 仔细看一下文末的demo和gif演示图</strong>  </p></blockquote><p>宏操作是vim中一个可以 录制并调用 按键组合的一个操作<br>可有效的减少重复操作  </p><p>可通过 <code>:h q</code> 查看帮助手册</p><p>宏 - 重复组合操作 - complex-repeat</p><h2 id="开始录制宏"><a href="#开始录制宏" class="headerlink" title="开始录制宏"></a>开始录制宏</h2><p>帮助:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">q&#123;0-9a-zA-Z&quot;&#125;<br>    在寄存器 &#123;0-9a-zA-Z&quot;&#125; 里记录键入的字符 (大写名字的寄存<br>    器表示附加键入的内容)。&#x27;q&#x27; 命令不能在执行寄存器时使<br>    用。同样，在映射和 |:normal| 里也不能。<br><br>    注意: 如果用作记录的寄存器用于 y 和 p，其结果多数不如<br>    你的预想，因为 p 会粘贴记录的宏，而 y 会覆盖记录的宏。<br></code></pre></td></tr></table></figure><p>在<strong>normal</strong>模式下，使用 q+指定寄存器开始录制宏, 只选的寄存器有 数字和大小写字母寄存器</p><p>例如 <code>qai12345&lt;cr&gt;&lt;esc&gt;</code> 即指定寄存器a，录制了动作 <code>进入插入模式 插入12345 回车换行 退出插入模式</code> 的宏操作</p><h2 id="结束录制宏"><a href="#结束录制宏" class="headerlink" title="结束录制宏"></a>结束录制宏</h2><p>帮助:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">q停止记录。(注意 实现细节: 停止记录的 &#x27;q&#x27; 不会被保存在<br>寄存器里，除非它是映射的结果)<br></code></pre></td></tr></table></figure><p>在vim录制宏的过程下，<strong>normal</strong>模式下使用q结束录制</p><p>接上 #开始录制宏 这部分的操作 开始录制到结束录制的完整键入为 <code>qai12345&lt;cr&gt;&lt;esc&gt;q</code></p><h2 id="调用录制完成的宏"><a href="#调用录制完成的宏" class="headerlink" title="调用录制完成的宏"></a>调用录制完成的宏</h2><p>帮助:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">@&#123;0-9a-z&quot;.=*+&#125;<br>    执行寄存器 &#123;0-9a-z&quot;.=*+&#125; 的内容 [count] 次。 注意 不能<br>    用寄存器 &#x27;%&#x27; (当前文件名) 和 &#x27;#&#x27; (轮换文件名)。<br>    寄存器的执行方式与映射类同，也就是说，&#x27;wildchar&#x27; 和<br>    &#x27;wildcharm&#x27; 的差异适用此处，而撤销的同步可能有所不同。<br>    &quot;@=&quot; 则会提示你输入一个表达式。这个表达式的结果会被执行。<br></code></pre></td></tr></table></figure><p>在<strong>normal</strong>模式下，使用 @+指定寄存器名称 调用对应寄存器上的宏。</p><p>例如本文前面于a寄存器上录制了宏 调用时只需要 @a 即可</p><p>PS: 特殊的调用形式 @@可调用最近调用过的宏 即@a后，可用@@调用a寄存器的宏</p><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 现有一个如下文档 需要将其由上面的置为下面的结果<br><br>string aa = &quot;&quot;<br>string bbb = &quot;&quot;<br>double cccc = 10.0<br>float eee = 1.0<br>float ffff = 1.0<br><br>TO<br><br>string key1 = &quot;&quot;;<br>string key2 = &quot;&quot;;<br>double key3 = 10.0;<br>float key4 = 1.0;<br>float key5 = 1.0;<br><br>需要做的改动共有两处 1: 将key重命名为key12345, 2: 为每行行尾添加上 ; 符号<br></code></pre></td></tr></table></figure><p>实现(其实位置在第一行 第一列):  </p><ol><li>先复制一个 <code>key0</code></li><li>录制一个宏 <code>qq w viwp &lt;ctrl+a&gt; yiw A; &lt;esc&gt;j^ q</code><ol><li>qq 指定q寄存器开始录制宏</li><li>w  跳转到下一个单词开头 即跳到aa处</li><li>viwp 选中 <code>aa</code> 并且用p将 <code>aa</code> 替换为 <code>key0</code></li><li>&lt;ctrl+a&gt; 将 <code>key0</code> 自增为 <code>key1</code></li><li>yiw 将 <code>key1</code> 复制到剪切板</li><li>A; 跳到行尾插入;</li><li><esc>j^ 退出插入模式并到下一行且回到行首</li><li>q 结束本次录制</li></ol></li><li>调用4次宏 <code>4@q</code></li></ol><p>实现的要点在于每次的开始状态、结束状态要保持一致 例如上述</p><h2 id="GIF演示"><a href="#GIF演示" class="headerlink" title="GIF演示"></a>GIF演示</h2><p><img src="/img/vim%E5%AE%8F%E6%93%8D%E4%BD%9C/001.gif" alt="演示"></p>]]></content>
    
    
    
    <tags>
      
      <tag>VIM</tag>
      
      <tag>NVIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写一个可以键盘控制的shell脚本</title>
    <link href="/menushell/"/>
    <url>/menushell/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#%E5%86%99%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%9A%84shell%E8%84%9A%E6%9C%AC">写一个可以键盘控制的shell脚本</a><ul><li><a href="#menu%E8%84%9A%E6%9C%AC">MENU脚本</a><ul><li><a href="#menu%E8%84%9A%E6%9C%AC%E8%AE%B2%E8%A7%A3">MENU脚本讲解</a></li></ul></li><li><a href="#get_char%E8%AF%A6%E8%A7%A3">_get_char详解</a></li><li><a href="#demo%E8%84%9A%E6%9C%AC">DEMO脚本</a></li><li><a href="#%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA">效果展示</a></li><li><a href="#%E4%B8%80%E4%BA%9B%E7%A4%BA%E8%8C%83%E8%84%9A%E6%9C%AC">一些示范脚本</a></li></ul></li></ul><!-- markdown-toc --><h2 id="写一个可以键盘控制的shell脚本"><a href="#写一个可以键盘控制的shell脚本" class="headerlink" title="写一个可以键盘控制的shell脚本"></a>写一个可以键盘控制的shell脚本</h2><p><a href="https://www.bilibili.com/video/BV11r4y1g73U/">bilibili视频链接</a><br><img src="/img/menu/menu.gif" alt="show"></p><h3 id="MENU脚本"><a href="#MENU脚本" class="headerlink" title="MENU脚本"></a>MENU脚本</h3><p><a href="/file/menu">menu脚本文件 可以直接保存到本地</a></p><p>若无法下载 则手动编辑本文文件</p><p>!!!PS!!!<br>menu()中的 ^C ^M ^[ 分别代表ctrl+c 回车 esc 且不能直接用字符形式输入<br>输入方法为<br>在vim或vi插入模式中(ctrl+v会触发源字符输入模式)<br>^C: ctrl-v ctrl-c<br>^M: ctrl-v enter<br>^[: ctrl-v esc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">menu</span><br>_green() &#123; printf &quot;\033[32m$*\033[0m&quot;; &#125;<br>_get_char() &#123; SAVEDSTTY=`stty -g`; stty -echo; stty raw; dd if=/dev/tty bs=1 count=1 2&gt; /dev/null; stty -raw; stty echo; stty $SAVEDSTTY; &#125;<br>_list() &#123;<br>    # 渲染tabs行<br>    text=&#x27;&#x27;<br>    for ((i = 0; i &lt; $&#123;#menu_tabs[@]&#125;; i++)); do<br>        _tab=$&#123;menu_tabs[$i]&#125;<br>        [ &quot;$_tab&quot; = &quot;$&#123;menu_tabs[$tab_index]&#125;&quot; ] &amp;&amp; text=&quot;$text $(_green $_tab)&quot; || text=&quot;$text $_tab&quot;<br>    done<br><br>    [ &quot;$text&quot; ] &amp;&amp; echo -e &quot;   $text\n&quot;<br><br>    # 渲染菜单选项行<br>    for ((i = 0; i &lt; $&#123;#menu_items[@]&#125;; i++)); do<br>        _item=$&#123;menu_items[$i]&#125;<br>        test &quot;$&#123;_item&#125;&quot; = &quot;$&#123;menu_items[$item_index]&#125;&quot; &amp;&amp; echo -e $(_green &quot; -&gt; $&#123;_item[@]&#125;&quot;) || echo &quot;    $&#123;_item[@]&#125;&quot;<br>    done<br>&#125;<br>_key() &#123;<br>    # 计算新的tab_index和tab<br>    tab_index=$(($tab_index+$1))<br>    len=$&#123;#menu_tabs[*]&#125;<br>    test $tab_index -lt 0 &amp;&amp; tab_index=$((len - 1))<br>    test $tab_index -gt $((len - 1)) &amp;&amp; tab_index=0<br>    tab=$&#123;menu_tabs[$tab_index]&#125;<br><br>    # 计算新的item_index和item<br>    item_index=$(($item_index+$2))<br>    len=$&#123;#menu_items[*]&#125;<br>    test $item_index -lt 0 &amp;&amp; item_index=$((len - 1))<br>    test $item_index -gt $((len - 1)) &amp;&amp; item_index=0<br>    item=$&#123;menu_items[$item_index]&#125;<br><br>    clear<br><br>    pre_hook<br>    _list<br>    after_hook<br><br>    # 有时会存在pre_hook或after_hook操作了tab或item的情况 需要做一层保护<br>    tab=$&#123;menu_tabs[$tab_index]&#125;<br>    item=$&#123;menu_items[$item_index]&#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##############################################</span></span><br><br>function pre_hook() &#123; :; &#125;<br>function after_hook() &#123; :; &#125;<br>menu_tabs=()<br>menu_items=()<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">调用menu方法展开菜单</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">上下左右移动tab或item，回车选中 q Q ctrl-c 退出脚本</span><br>menu() &#123;<br>    _key 0 0<br>    while :; do<br>        key=`_get_char`<br>        case &quot;$key&quot; in<br>            &#x27;q&#x27;|&#x27;Q&#x27;|&#x27;^C&#x27;) exit 1 ;;<br>            &#x27;^M&#x27;) break ;;<br>            &#x27;^[&#x27;)<br>                secondchar=`_get_char`<br>                thirdchar=`_get_char`<br>                case &quot;$thirdchar&quot; in<br>                    A) _key 0 -1 ;;<br>                    B) _key 0 1 ;;<br>                    D) _key -1 0 ;;<br>                    C) _key 1 0 ;;<br>                esac ;;<br>        esac<br>    done<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MENU脚本讲解"><a href="#MENU脚本讲解" class="headerlink" title="MENU脚本讲解"></a>MENU脚本讲解</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 用到的依赖func，这些不允许用户自定义或主动调用<br>_green(): 用于打印绿色文本<br>_get_char(): 用于从键盘获取操作<br>_list(): 渲染菜单<br>_key(): 计算新的tab_index、item_index并渲染菜单的func<br><br># 用户可自定义的变量和func<br>menu_tabs: 用于自定义tab项 列表 例如 (1 2 3 4)<br>menu_items: 用于自定义当前的item项 列表 例如 (&#x27;item1&#x27; &#x27;item2&#x27; &#x27;item3&#x27;)<br>pre_hook(): 发生在渲染菜单前的钩子方法(此时新的tab_index、item_index已计算完成)<br>after_hook(): 发生在渲染菜单后的钩子方法<br><br># 用户可使用的变量和func<br>tab_index: 当前的tab索引号 从0开始<br>item_index: 当前的item索引号 从0开始<br>tab: 当前的tab<br>item: 当前的item<br>menu(): 进入菜单选择状态的入口func<br></code></pre></td></tr></table></figure><h3 id="get-char详解"><a href="#get-char详解" class="headerlink" title="_get_char详解"></a>_get_char详解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">_get_char() &#123;<br>  SAVEDSTTY=`stty -g`; # 保存tty设置<br>  stty -echo;          # tty 关闭回显<br>  stty raw;            # tty 开启raw模式<br>  dd if=/dev/tty bs=1 count=1 2&gt; /dev/null; # 读取一个输入<br>  stty -raw;           # tty 关闭raw模式<br>  stty echo;           # tty 开始回显<br>  stty $SAVEDSTTY;     # 还原tty设置<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DEMO脚本"><a href="#DEMO脚本" class="headerlink" title="DEMO脚本"></a>DEMO脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ./menu<br>menu_tabs=(&#x27;tab1&#x27; &#x27;tab2&#x27; &#x27;tab3&#x27;)<br>menu_items=(&#x27;item1&#x27; &#x27;item2&#x27; &#x27;item3&#x27;)<br>pre_hook() &#123;<br>    echo &#x27;请选择tab or item:&#x27;<br>&#125;<br>after_hook() &#123;<br>    echo &#x27;当前选中项为:&#x27; $&#123;menu_tabs[$tab_index]&#125; $&#123;menu_items[$item_index]&#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">调用 func: menu 开始菜单 [上下左右移动] [回车选中] [q或esc或ctrl c结束]</span><br>menu<br>echo 结束了<br>echo 最终选中的项为: $&#123;menu_tabs[$tab_index]&#125; $&#123;menu_items[$item_index]&#125;<br></code></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/img/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E7%9A%84shell%E8%84%9A%E6%9C%AC/001.gif" alt="show"></p><h3 id="一些示范脚本"><a href="#一些示范脚本" class="headerlink" title="一些示范脚本"></a>一些示范脚本</h3><p>快速连接远程服务器  </p><p>.&#x2F;ssh.sh 开始菜单选择对应命令执行<br>.&#x2F;ssh.sh *非空 直接执行 ssh *</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>source ./menu<br><br>menu_items=(&quot;跳板机&quot; &quot;腾讯云&quot; &quot;跳板机2&quot; &quot;跳板机win&quot; &quot;翻墙机&quot; &quot;公网机&quot;)<br><br>cmds[0]=&#x27;ssh **@a.b.com&#x27;<br>cmds[1]=&#x27;ssh root@host1&#x27;<br>cmds[2]=&#x27;sshpass -p ****** ssh **@jms.hwwt2.com -p 2223&#x27;<br>cmds[3]=&#x27;rdesktop -u ******** -p ****** ip:3390 -r sound:off -g 1920x1080&#x27;<br>cmds[4]=&#x27;ssh root@host2&#x27;<br>cmds[5]=&#x27;ssh root@255.255.255.251&#x27;<br><br>after_hook() &#123;<br>    echo<br>    echo &#x27;   &#x27;$&#123;cmds[$item_index]&#125;<br>&#125;<br><br>case $1 in<br>    &#x27;&#x27;)<br>        menu<br>        echo 连接$&#123;menu_items[$item_index]&#125;<br>        exec $&#123;cmds[$item_index]&#125;<br>        ;;<br>    *) ssh $*;;<br>esac<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>SHELL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang中for range的坑点</title>
    <link href="/golangforrangetrap/"/>
    <url>/golangforrangetrap/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#golang%E4%B8%ADfor-range%E7%9A%84%E5%9D%91%E7%82%B9">golang中for range的坑点</a><ul><li><a href="#%E9%94%99%E8%AF%AF%E4%BE%8B%E5%AD%90">错误例子</a></li><li><a href="#%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90">原因分析</a></li><li><a href="#%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86">正确处理</a></li></ul></li></ul><!-- markdown-toc --><h2 id="golang中for-range的坑点"><a href="#golang中for-range的坑点" class="headerlink" title="golang中for range的坑点"></a>golang中for range的坑点</h2><p>GOLANG 可通过 for range 遍历 数组、切片、映射等类型。</p><p>但使用不当时 有时程序运行会不符合预期。</p><h3 id="错误例子"><a href="#错误例子" class="headerlink" title="错误例子"></a>错误例子</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    sourceArr := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>    targetArr := []*<span class="hljs-type">int</span>&#123;&#125;<br><br>    <span class="hljs-keyword">for</span> _, num := <span class="hljs-keyword">range</span> sourceArr &#123;<br>        targetArr = <span class="hljs-built_in">append</span>(targetArr, &amp;num)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> _, num_p := <span class="hljs-keyword">range</span> targetArr &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;num: %v\n&quot;</span>, *num_p)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 预期结果为<br>num: 0<br>num: 1<br>num: 2<br>num: 3<br><br># 实际结果为<br>num: 3<br>num: 3<br>num: 3<br>num: 3<br></code></pre></td></tr></table></figure><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>进一步分析打印程序如下 打印targetArr如下</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    sourceArr := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>    targetArr := []*<span class="hljs-type">int</span>&#123;&#125;<br><br>    <span class="hljs-keyword">for</span> _, num := <span class="hljs-keyword">range</span> sourceArr &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;&amp;num: %+v\n&quot;</span>, &amp;num)<br>        targetArr = <span class="hljs-built_in">append</span>(targetArr, &amp;num)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> _, num_p := <span class="hljs-keyword">range</span> targetArr &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;num: %v\n&quot;</span>, *num_p)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;targetArr: %v\n&quot;</span>, targetArr)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 结果如下<br>&amp;num: 0xc00018c000<br>&amp;num: 0xc00018c000<br>&amp;num: 0xc00018c000<br>&amp;num: 0xc00018c000<br>num: 3<br>num: 3<br>num: 3<br>num: 3<br>targetArr: [0xc00018c000 0xc00018c000 0xc00018c000 0xc00018c000]<br><br>可见 range 的第二返回值 始终指向同一个地址<br>导致 *num_p 取得的都是 sourceArr 的最后一项<br><br>!!! 一旦在for range中 使用了 第二返回值 &amp; 取值赋值时，都要谨慎处理<br></code></pre></td></tr></table></figure><h3 id="正确处理"><a href="#正确处理" class="headerlink" title="正确处理"></a>正确处理</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    sourceArr := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>    targetArr := []*<span class="hljs-type">int</span>&#123;&#125;<br><br>    <span class="hljs-keyword">for</span> idx := <span class="hljs-keyword">range</span> sourceArr &#123;<br>        targetArr = <span class="hljs-built_in">append</span>(targetArr, &amp;sourceArr[idx])<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> _, num_p := <span class="hljs-keyword">range</span> targetArr &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;num: %v\n&quot;</span>, *num_p)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当存在指针传递时，尽量使用index作为赋值依据，上述程序 符合预期</p>]]></content>
    
    
    
    <tags>
      
      <tag>GOLANG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arch安装指定版本的包--降级操作</title>
    <link href="/demotearchpkg/"/>
    <url>/demotearchpkg/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#arch-linux-%E5%8C%85%E7%89%88%E6%9C%AC%E9%99%8D%E7%BA%A7%E6%93%8D%E4%BD%9C">ARCH LINUX 包版本降级操作</a><ul><li><a href="#pacman-%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E5%8C%85">pacman 安装指定版本包</a><ul><li><a href="#%E4%BB%8E%E7%BC%93%E5%AD%98%E5%8C%85%E4%B8%AD%E5%AE%89%E8%A3%85">从缓存包中安装</a></li><li><a href="#%E4%BB%8E%E4%BB%93%E5%BA%93%E4%B8%AD%E5%AE%89%E8%A3%85">从仓库中安装</a></li></ul></li><li><a href="#yay-%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E5%8C%85">yay 安装指定版本包</a></li><li><a href="#%E5%BF%BD%E7%95%A5%E6%8C%87%E5%AE%9A%E5%8C%85%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0">忽略指定包版本更新</a></li><li><a href="#%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C">实际操作</a></li></ul></li></ul><!-- markdown-toc --><h2 id="ARCH-LINUX-包版本降级操作"><a href="#ARCH-LINUX-包版本降级操作" class="headerlink" title="ARCH LINUX 包版本降级操作"></a>ARCH LINUX 包版本降级操作</h2><p>本文分别描述 pacman 和 yay 如何安装历史版本的包</p><p><a href="https://wiki.archlinux.org/title/Arch_Linux_Archive#How_to_downgrade_one_package">参考自:Arch_Linux_Archive#How_to_downgrade_one_package</a></p><h3 id="pacman-安装指定版本包"><a href="#pacman-安装指定版本包" class="headerlink" title="pacman 安装指定版本包"></a>pacman 安装指定版本包</h3><h4 id="从缓存包中安装"><a href="#从缓存包中安装" class="headerlink" title="从缓存包中安装"></a>从缓存包中安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd /var/cache/pacman/pkg<br>ls | grep pkgname<br>sudo pacman -U packagename-version.pkg.tar.xz<br></code></pre></td></tr></table></figure><h4 id="从仓库中安装"><a href="#从仓库中安装" class="headerlink" title="从仓库中安装"></a>从仓库中安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">到 https://archive.archlinux.org/packages 找到自己对应的包的链接<br>sudo pacman -U https://archive.archlinux.org/packages/.../packagename.pkg.tar.xz<br></code></pre></td></tr></table></figure><h3 id="yay-安装指定版本包"><a href="#yay-安装指定版本包" class="headerlink" title="yay 安装指定版本包"></a>yay 安装指定版本包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd ~/.cache/yay/pkg<br><br>yay -U pkgname-version.pkg.tar.zst<br></code></pre></td></tr></table></figure><h3 id="忽略指定包版本更新"><a href="#忽略指定包版本更新" class="headerlink" title="忽略指定包版本更新"></a>忽略指定包版本更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vim /etc/pacman.conf<br><br>在 [options] 下添加<br>IgnorePkg = pkg1 pkg2 ...<br></code></pre></td></tr></table></figure><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>本次遭遇bluez版本更新后发生错误 进行了bluez版本降级操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /var/cache/pacman/pkg<br>sudo pacman -U $( ls |grep bluez | grep 5.61 | grep -v sig)<br><br>vim /etc/pacman.conf<br><br>[options]<br>IgnorePkg = bluez bluez-cups bluez-hid2hci bluez-libs bluez-plugins bluez-utils<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>ARCH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>也许是最便捷的SS客户端</title>
    <link href="/v2rayaclient/"/>
    <url>/v2rayaclient/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#%E5%88%A9%E7%94%A8docker%E5%90%AF%E5%8A%A8">利用docker启动</a></li><li><a href="#%E9%85%8D%E7%BD%AE">配置</a></li><li><a href="#v2ray%E9%85%8D%E7%BD%AE%E6%83%85%E5%86%B5">V2RAY配置情况</a></li></ul><!-- markdown-toc --><h2 id="利用docker启动"><a href="#利用docker启动" class="headerlink" title="利用docker启动"></a>利用docker启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>  --restart=always \<br>  --privileged \<br>  --network=host \<br>  --name v2raya \<br>  -e V2RAYA_ADDRESS=0.0.0.0:2017 \<br>  -v /lib/modules:/lib/modules \<br>  -v /etc/resolv.conf:/etc/resolv.conf \<br>  -v /etc/v2raya:/etc/v2raya \<br>  mzz2017/v2raya<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">从浏览器访问 localhost:2017<br>然后从页面上配置即可<br></code></pre></td></tr></table></figure><h2 id="V2RAY配置情况"><a href="#V2RAY配置情况" class="headerlink" title="V2RAY配置情况"></a>V2RAY配置情况</h2><p><img src="/img/%E4%B9%9F%E8%AE%B8%E6%98%AF%E6%9C%80%E4%BE%BF%E6%8D%B7%E7%9A%84SS%E5%AE%A2%E6%88%B7%E7%AB%AF/001.png" alt="V2RAY配置情况"></p>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
      <tag>SS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地与SSH远程同步NVIM剪切板</title>
    <link href="/remoteclipboard/"/>
    <url>/remoteclipboard/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#%E6%9C%AC%E5%9C%B0%E4%B8%8Essh%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5nvim%E5%89%AA%E5%88%87%E6%9D%BF">本地与SSH远程同步NVIM剪切板</a></li><li><a href="#%E5%85%88%E8%AF%B4%E6%80%8E%E4%B9%88%E5%81%9A">先说怎么做</a><ul><li><a href="#%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%93%8D%E4%BD%9C">(本地)服务端操作</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%93%8D%E4%BD%9C">(远程)客户端操作</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEssh%E8%BF%9C%E7%A8%8B">本地远程访问SSH远程</a></li></ul></li><li><a href="#%E5%86%8D%E8%AF%B4%E4%B8%BA%E4%BB%80%E4%B9%88">再说为什么</a><ul><li><a href="#%E5%B8%B8%E8%A7%81linux%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%89%AA%E5%88%87%E6%9D%BF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0">常见linux的系统剪切板如何实现</a></li><li><a href="#vim%E5%A6%82%E4%BD%95%E5%92%8C%E7%B3%BB%E7%BB%9F%E5%89%AA%E5%88%87%E6%9D%BF%E4%BA%A4%E4%BA%92">vim如何和系统剪切板交互</a></li><li><a href="#lemonada%E6%98%AF%E4%BB%80%E4%B9%88">lemonada是什么</a></li><li><a href="#ssh-r-%E5%8F%82%E6%95%B0%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E4%BB%80%E4%B9%88%E4%BA%8B%E6%83%85">SSH -R 参数做了一个什么事情</a></li></ul></li><li><a href="#%E5%A4%A7%E8%87%B4%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%94%A8%E5%9B%BE">大致实现调用图</a></li></ul><!-- markdown-toc --><h2 id="本地与SSH远程同步NVIM剪切板"><a href="#本地与SSH远程同步NVIM剪切板" class="headerlink" title="本地与SSH远程同步NVIM剪切板"></a>本地与SSH远程同步NVIM剪切板</h2><p>经常有朋友困扰 如何同步本地和ssh远程的系统剪切板 让两边编辑文件时能有最同步的体验</p><p>本文 也许是最优的同步本地和ssh远程系统剪贴板的解决方案</p><h2 id="先说怎么做"><a href="#先说怎么做" class="headerlink" title="先说怎么做"></a>先说怎么做</h2><h3 id="本地-服务端操作"><a href="#本地-服务端操作" class="headerlink" title="(本地)服务端操作"></a>(本地)服务端操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">从 https://github.com/lemonade-command/lemonade/releases 下载自己可用的lemonade版本<br>例如我是linux直接下载 lemonade_linux_386.tar.gz 包<br><br>gzip -d lemonade_linux_386.tar.gz<br>tar -xvf lemonade_linux_386.tar.gz<br><br>得到 lemonada 可执行文件<br>本地启动 lemonada 可执行文件服务端<br><br>./lemonada server<br></code></pre></td></tr></table></figure><h3 id="远程-客户端操作"><a href="#远程-客户端操作" class="headerlink" title="(远程)客户端操作"></a>(远程)客户端操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">同理 下载对应系统的lemonada 可执行文件 放置在 /usr/bin 目录下即可<br></code></pre></td></tr></table></figure><h3 id="本地远程访问SSH远程"><a href="#本地远程访问SSH远程" class="headerlink" title="本地远程访问SSH远程"></a>本地远程访问SSH远程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh -R 2489:127.0.0.1:2489 user@host<br><br>然后就可以享受两端同步的剪切板了<br></code></pre></td></tr></table></figure><h2 id="再说为什么"><a href="#再说为什么" class="headerlink" title="再说为什么"></a>再说为什么</h2><h3 id="常见linux的系统剪切板如何实现"><a href="#常见linux的系统剪切板如何实现" class="headerlink" title="常见linux的系统剪切板如何实现"></a>常见linux的系统剪切板如何实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">剪切板是什么 -- 一个用于存放、提供临时剪切数据的地方<br>而常见的linux发行版由 xclip 提供 剪切板能力<br><br>其具体表现为<br>  xclip -o -selection any          -- 输出剪切板any分区内的内容<br>  echo 123 | xclip -selection any  -- 将123写入到剪切板any分区 可再用xclip -o -selection any取出<br><br>大致可以这么理解 例如当我们使用了 ctrl + c 按键时，也是用 对应的应用程序调用 xclip 命令完成复制<br>ctrl + v 时亦是从中取得数据完成粘贴动作<br><br>而 xclip 程序 依赖于 xserver，这意味着你远程ssh客户端时，因为其不具备 xserver 的gui界面<br>所以一般来说，终端交互的ssh远程服务器 xclip命令是完全不可用的<br>使用命令 xclip -o<br>会得到类似错误输出 Error: Can&#x27;t open display: (null)<br><br>其他系统也是类似的底层实现<br>  mac系统一般基于 pbcopy pbpaste命令实现<br>  linux一般为xclip或xsel或wl-copy、wl-paste实现<br>  windows则为win32yank.exe<br></code></pre></td></tr></table></figure><h3 id="vim如何和系统剪切板交互"><a href="#vim如何和系统剪切板交互" class="headerlink" title="vim如何和系统剪切板交互"></a>vim如何和系统剪切板交互</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vim的剪切板实现部分代码见 /usr/share/nvim/runtime/autoload/provider/clipboard.vim<br><br>当vim支持了<br>  set clipboard=unnamed<br>  set clipboard+=unnamedplus<br>特性时<br><br>可以见下面这一段代码<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs VimScript">function! provider#clipboard#Executable() abort<br>  if exists(&#x27;g:clipboard&#x27;)<br>    if type(&#123;&#125;) isnot# type(g:clipboard)<br>          \ || type(&#123;&#125;) isnot# type(get(g:clipboard, &#x27;copy&#x27;, v:null))<br>          \ || type(&#123;&#125;) isnot# type(get(g:clipboard, &#x27;paste&#x27;, v:null))<br>      let s:err = &#x27;clipboard: invalid g:clipboard&#x27;<br>      return &#x27;&#x27;<br>    endif<br><br>    let s:copy = &#123;&#125;<br>    let s:copy[&#x27;+&#x27;] = s:split_cmd(get(g:clipboard.copy, &#x27;+&#x27;, v:null))<br>    let s:copy[&#x27;*&#x27;] = s:split_cmd(get(g:clipboard.copy, &#x27;*&#x27;, v:null))<br><br>    let s:paste = &#123;&#125;<br>    let s:paste[&#x27;+&#x27;] = s:split_cmd(get(g:clipboard.paste, &#x27;+&#x27;, v:null))<br>    let s:paste[&#x27;*&#x27;] = s:split_cmd(get(g:clipboard.paste, &#x27;*&#x27;, v:null))<br><br>    let s:cache_enabled = get(g:clipboard, &#x27;cache_enabled&#x27;, 0)<br>    return get(g:clipboard, &#x27;name&#x27;, &#x27;g:clipboard&#x27;)<br>  elseif has(&#x27;mac&#x27;)<br>    let s:copy[&#x27;+&#x27;] = [&#x27;pbcopy&#x27;]<br>    let s:paste[&#x27;+&#x27;] = [&#x27;pbpaste&#x27;]<br>    let s:copy[&#x27;*&#x27;] = s:copy[&#x27;+&#x27;]<br>    let s:paste[&#x27;*&#x27;] = s:paste[&#x27;+&#x27;]<br>    let s:cache_enabled = 0<br>    return &#x27;pbcopy&#x27;<br>  elseif !empty($WAYLAND_DISPLAY) &amp;&amp; executable(&#x27;wl-copy&#x27;) &amp;&amp; executable(&#x27;wl-paste&#x27;)<br>    let s:copy[&#x27;+&#x27;] = [&#x27;wl-copy&#x27;, &#x27;--foreground&#x27;, &#x27;--type&#x27;, &#x27;text/plain&#x27;]<br>    let s:paste[&#x27;+&#x27;] = [&#x27;wl-paste&#x27;, &#x27;--no-newline&#x27;]<br>    let s:copy[&#x27;*&#x27;] = [&#x27;wl-copy&#x27;, &#x27;--foreground&#x27;, &#x27;--primary&#x27;, &#x27;--type&#x27;, &#x27;text/plain&#x27;]<br>    let s:paste[&#x27;*&#x27;] = [&#x27;wl-paste&#x27;, &#x27;--no-newline&#x27;, &#x27;--primary&#x27;]<br>    return &#x27;wl-copy&#x27;<br>  elseif !empty($DISPLAY) &amp;&amp; executable(&#x27;xclip&#x27;)<br>    let s:copy[&#x27;+&#x27;] = [&#x27;xclip&#x27;, &#x27;-quiet&#x27;, &#x27;-i&#x27;, &#x27;-selection&#x27;, &#x27;clipboard&#x27;]<br>    let s:paste[&#x27;+&#x27;] = [&#x27;xclip&#x27;, &#x27;-o&#x27;, &#x27;-selection&#x27;, &#x27;clipboard&#x27;]<br>    let s:copy[&#x27;*&#x27;] = [&#x27;xclip&#x27;, &#x27;-quiet&#x27;, &#x27;-i&#x27;, &#x27;-selection&#x27;, &#x27;primary&#x27;]<br>    let s:paste[&#x27;*&#x27;] = [&#x27;xclip&#x27;, &#x27;-o&#x27;, &#x27;-selection&#x27;, &#x27;primary&#x27;]<br>    return &#x27;xclip&#x27;<br>  elseif !empty($DISPLAY) &amp;&amp; executable(&#x27;xsel&#x27;) &amp;&amp; s:cmd_ok(&#x27;xsel -o -b&#x27;)<br>    let s:copy[&#x27;+&#x27;] = [&#x27;xsel&#x27;, &#x27;--nodetach&#x27;, &#x27;-i&#x27;, &#x27;-b&#x27;]<br>    let s:paste[&#x27;+&#x27;] = [&#x27;xsel&#x27;, &#x27;-o&#x27;, &#x27;-b&#x27;]<br>    let s:copy[&#x27;*&#x27;] = [&#x27;xsel&#x27;, &#x27;--nodetach&#x27;, &#x27;-i&#x27;, &#x27;-p&#x27;]<br>    let s:paste[&#x27;*&#x27;] = [&#x27;xsel&#x27;, &#x27;-o&#x27;, &#x27;-p&#x27;]<br>    return &#x27;xsel&#x27;<br>  elseif executable(&#x27;lemonade&#x27;)<br>    let s:copy[&#x27;+&#x27;] = [&#x27;lemonade&#x27;, &#x27;copy&#x27;]<br>    let s:paste[&#x27;+&#x27;] = [&#x27;lemonade&#x27;, &#x27;paste&#x27;]<br>    let s:copy[&#x27;*&#x27;] = [&#x27;lemonade&#x27;, &#x27;copy&#x27;]<br>    let s:paste[&#x27;*&#x27;] = [&#x27;lemonade&#x27;, &#x27;paste&#x27;]<br>    return &#x27;lemonade&#x27;<br>  elseif executable(&#x27;doitclient&#x27;)<br>    let s:copy[&#x27;+&#x27;] = [&#x27;doitclient&#x27;, &#x27;wclip&#x27;]<br>    let s:paste[&#x27;+&#x27;] = [&#x27;doitclient&#x27;, &#x27;wclip&#x27;, &#x27;-r&#x27;]<br>    let s:copy[&#x27;*&#x27;] = s:copy[&#x27;+&#x27;]<br>    let s:paste[&#x27;*&#x27;] = s:paste[&#x27;+&#x27;]<br>    return &#x27;doitclient&#x27;<br>  elseif executable(&#x27;win32yank.exe&#x27;)<br>    if has(&#x27;wsl&#x27;) &amp;&amp; getftype(exepath(&#x27;win32yank.exe&#x27;)) == &#x27;link&#x27;<br>      let win32yank = resolve(exepath(&#x27;win32yank.exe&#x27;))<br>    else<br>      let win32yank = &#x27;win32yank.exe&#x27;<br>    endif<br>    let s:copy[&#x27;+&#x27;] = [win32yank, &#x27;-i&#x27;, &#x27;--crlf&#x27;]<br>    let s:paste[&#x27;+&#x27;] = [win32yank, &#x27;-o&#x27;, &#x27;--lf&#x27;]<br>    let s:copy[&#x27;*&#x27;] = s:copy[&#x27;+&#x27;]<br>    let s:paste[&#x27;*&#x27;] = s:paste[&#x27;+&#x27;]<br>    return &#x27;win32yank&#x27;<br>  elseif executable(&#x27;termux-clipboard-set&#x27;)<br>    let s:copy[&#x27;+&#x27;] = [&#x27;termux-clipboard-set&#x27;]<br>    let s:paste[&#x27;+&#x27;] = [&#x27;termux-clipboard-get&#x27;]<br>    let s:copy[&#x27;*&#x27;] = s:copy[&#x27;+&#x27;]<br>    let s:paste[&#x27;*&#x27;] = s:paste[&#x27;+&#x27;]<br>    return &#x27;termux-clipboard&#x27;<br>  elseif !empty($TMUX) &amp;&amp; executable(&#x27;tmux&#x27;)<br>    let s:copy[&#x27;+&#x27;] = [&#x27;tmux&#x27;, &#x27;load-buffer&#x27;, &#x27;-&#x27;]<br>    let s:paste[&#x27;+&#x27;] = [&#x27;tmux&#x27;, &#x27;save-buffer&#x27;, &#x27;-&#x27;]<br>    let s:copy[&#x27;*&#x27;] = s:copy[&#x27;+&#x27;]<br>    let s:paste[&#x27;*&#x27;] = s:paste[&#x27;+&#x27;]<br>    return &#x27;tmux&#x27;<br>  endif<br><br>  let s:err = &#x27;clipboard: No clipboard tool. :help clipboard&#x27;<br>  return &#x27;&#x27;<br>endfunction<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">大致可知 vim也是通过本文件的代码来调用的外部命令实现的 剪切板的赋值和读取<br><br>其中默认支持了lemonada的实现(当为linux且xclip不可用 lemonada可用时)<br><br>当触发复制、粘贴操作时，就会调用对应的外部命令还获取值<br></code></pre></td></tr></table></figure><h3 id="lemonada是什么"><a href="#lemonada是什么" class="headerlink" title="lemonada是什么"></a>lemonada是什么</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://github.com/lemonade-command/lemonade<br><br>Lemonade is a remote utility tool. (copy, paste and open browser) over TCP.<br><br>是一个利用TCP实现远程本地 复制 粘贴的 命令行工具<br><br>如果需要修改一些lemonada的参数，请参照项目说明<br><br>大致实现步骤为 在你本地启动 lemonada 服务端，默认端口为 2489<br>然后通过 ssh -R 2489:127.0.0.1:2489 user@host 通过代理形式登录到ssh远程，此时本地远程2489端口打通<br>确保 ssh 远程的 lemonada bin文件可用即可<br>每次触发 复制粘贴 动作时，都会通过该bin文件到服务端进行读取或写入操作<br></code></pre></td></tr></table></figure><h3 id="SSH-R-参数做了一个什么事情"><a href="#SSH-R-参数做了一个什么事情" class="headerlink" title="SSH -R 参数做了一个什么事情"></a>SSH -R 参数做了一个什么事情</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh -R HostC:PortC:HostB:PortB  user@HostC<br><br>远端启动端口，把远端端口数据转发到本地。<br><br>HostA 将自己可以访问的 HostB:PortB 暴露给外网服务器 HostC:PortC，在 HostA 上运行：<br></code></pre></td></tr></table></figure><h2 id="大致实现调用图"><a href="#大致实现调用图" class="headerlink" title="大致实现调用图"></a>大致实现调用图</h2><p><img src="/img/%E6%9C%AC%E5%9C%B0%E4%B8%8ESSH%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5VIM%E5%89%AA%E5%88%87%E6%9D%BF/001.png" alt="调用图"></p>]]></content>
    
    
    
    <tags>
      
      <tag>VIM</tag>
      
      <tag>LINUX</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LINUX下的GIF录制解决方案</title>
    <link href="/linuxgifsolution/"/>
    <url>/linuxgifsolution/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GitLab --><ul><li><a href="#linux%E4%B8%8B%E7%9A%84gif%E5%BD%95%E5%88%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">LINUX下的GIF录制解决方案</a></li><li><a href="#%E7%9B%B4%E6%8E%A5%E4%B8%8A%E7%BB%93%E8%AE%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7byzanz">直接上结论 命令行工具byzanz</a></li><li><a href="#byzanz%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">byzanz的简单使用示例</a></li><li><a href="#%E5%9B%BA%E5%8C%96%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8">固化脚本使用</a></li><li><a href="#%E7%AC%A6%E5%90%88gui%E7%9A%84%E5%BD%95%E5%88%B6%E6%93%8D%E4%BD%9C">符合GUI的录制操作</a></li></ul><!-- markdown-toc --><h2 id="LINUX下的GIF录制解决方案"><a href="#LINUX下的GIF录制解决方案" class="headerlink" title="LINUX下的GIF录制解决方案"></a>LINUX下的GIF录制解决方案</h2><h2 id="直接上结论-命令行工具byzanz"><a href="#直接上结论-命令行工具byzanz" class="headerlink" title="直接上结论 命令行工具byzanz"></a>直接上结论 命令行工具byzanz</h2><p><a href="https://github.com/xatgithub/byzanz">byzanz</a> 是一个轻量的 用于录制gif的命令行工具，!!!无GUI!!!</p><h2 id="byzanz的简单使用示例"><a href="#byzanz的简单使用示例" class="headerlink" title="byzanz的简单使用示例"></a>byzanz的简单使用示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">byzanz-record -x 0 -y 0 -w 1920 -h 1080 -d 10 --delay=3 -v ~/demo.gif --exec=&quot;some command&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数介绍</span><br>-x 录制位置起始点x<br>-y 录制位置起始点y<br>-w 录制宽度<br>-h 录制高度<br>-d 录制持续时长<br>--delay 延迟任意秒后开始录制<br>-v 保存为指定文件<br>--exec 录制某某命令期间<br><br>例如想延迟3s录制整个屏幕10s时长的gif可以用命令<br>byzanz-record -x 0 -y 0 -w 1920 -h 1080 -d 10 --delay=3 -v ~/demo.gif<br></code></pre></td></tr></table></figure><h2 id="固化脚本使用"><a href="#固化脚本使用" class="headerlink" title="固化脚本使用"></a>固化脚本使用</h2><p>命令行下是可以直接通过命令的形式, 但非常不方便 此时我们可以通过固化为一个脚本来使用命令<br>~&#x2F;gif-recorder.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/bash</span><br>byzanz-record -x 0 -y 0 -w 1920 -h 1080 -d 10 --delay=3 -v ~/demo.gif<br></code></pre></td></tr></table></figure><h2 id="符合GUI的录制操作"><a href="#符合GUI的录制操作" class="headerlink" title="符合GUI的录制操作"></a>符合GUI的录制操作</h2><p>此时可以借助一些别的工具来获取 xywh 值, 例如<br>  利用 xwininfo 命令获取指定窗口的 x y w h 值<br>  利用 xrectsel 命令获取指定区域的 x y w h 值<br>若没有这两个包可以手动安装  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/bash</span><br><br>gif_file=~/demo.gif<br>let x y w h<br><br>getwin() &#123;<br>    XWININFO=$(xwininfo)<br>    read x &lt; &lt;(awk -F: &#x27;/Absolute upper-left X/&#123;print $2&#125;&#x27; &lt;&lt;&lt; &quot;$XWININFO&quot;)<br>    read y &lt; &lt;(awk -F: &#x27;/Absolute upper-left Y/&#123;print $2&#125;&#x27; &lt;&lt;&lt; &quot;$XWININFO&quot;)<br>    read w &lt; &lt;(awk -F: &#x27;/Width/&#123;print $2&#125;&#x27; &lt;&lt;&lt; &quot;$XWININFO&quot;)<br>    read h &lt; &lt;(awk -F: &#x27;/Height/&#123;print $2&#125;&#x27; &lt;&lt;&lt; &quot;$XWININFO&quot;)<br>&#125;<br>getregion() &#123;<br>    xywh=($(xrectsel &quot;%x %y %w %h&quot;)) || exit -1<br>    let x=$&#123;xywh[0]&#125; y=$&#123;xywh[1]&#125; w=$&#123;xywh[2]&#125; h=$&#123;xywh[3]&#125;<br>&#125;<br><br>case $1 in<br>    1) getwin ;;<br>    2) getregion ;;<br>    3) let x=0 y=0 w=1920 h=1080 ;;<br>    *)<br>        echo 1: 选择窗口<br>        echo 2: 选择区域<br>        echo 3: 全屏<br>        exit<br>        ;;<br>esac<br><br>[ &quot;$2&quot; ] \<br>    &amp;&amp; byzanz-record -x $x -y $y -w $w -h $h -v $gif_file --exec=&quot;$2 $3 $4 $5 $6 $7 $8 $9 $10&quot; \<br>    || byzanz-record -x $x -y $y -w $w -h $h -v $gif_file<br>sleep 1<br></code></pre></td></tr></table></figure><p>!!!上述脚本简单解析!!!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">getwin 方法用于获取窗口的 x y w h 值<br>getregion 方法用于获取指定区域的 x y w h 值<br><br>!!!使用!!!: ./gif-recorder.sh $模式 $命令<br>上述脚本 固化了 三个模式<br>  1 选择窗口<br>  2 选择区域<br>  3 指定录制全屏<br>例如使用命令<br>./gif-recorder.sh 1 vim README.md<br>即可手动指定某窗口 并录制 vim 这个命令直到退出vim<br><br>也可以自己选择性添加参数进行定制操作<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LINUX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何利用位运算做逻辑控制</title>
    <link href="/bitcontrol/"/>
    <url>/bitcontrol/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GFM --><ul><li><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7%E7%AE%80%E4%BB%8B">位运算符号简介</a></li><li><a href="#%E5%BA%94%E7%94%A8">应用</a></li><li><a href="#%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B-linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86">经典案例 LINUX文件权限管理</a></li><li><a href="#%E5%9C%A8mysql%E4%B8%AD%E4%BD%BF%E7%94%A8">在MYSQL中使用</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><!-- markdown-toc --><h2 id="位运算符号简介"><a href="#位运算符号简介" class="headerlink" title="位运算符号简介"></a>位运算符号简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&amp; 与运算   两者为1时  为1:  0b0010 &amp; 0b0011 = 0b0010<br>| 或运算   一着为1时  为1:  0b0010 &amp; 0b1011 = 0b1011<br>^ 异或运算 两者不同时 为1:  0b0101 &amp; 0b1011 = 0b1110<br>! 取反运算 每位取反      : !0b1010 = 0b0101<br><br>PS:<br>  0b1010为二进制表达<br>  常见的位运算符有: &amp; | ! ^ &lt;&lt; &gt;&gt; 等, 建议花一些时间了解一下<br></code></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">案例1: 如何用 一个字段管理4个权限: 权限1、权限2、权限3、权限4<br><br>解决方案:<br>  用一个二进制数来表达权限 二进制位为1时表示有权限 0无权限<br>  将有权限1定义为 0b0001<br>  将有权限2定义为 0b0010<br>  将有权限3定义为 0b0100<br>  将有权限4定义为 0b1000<br><br>  综上: 若一个用户拥有权限1234, 则表达为 0b1111<br><br>1: 赋权(|: 或运算 两者有1时为1)<br>  role = 0b0010         //用户权限<br>  role = role | 0b0001  //赋予用户权限1 -&gt; role = 0b0011<br>  role = role | 0b1000  //赋予用户权限4 -&gt; role = 0b1011<br><br>2: 去权(^: 异或运算 两者不同时为1)<br>  role = 0b1011         //用户权限<br>  role = role ^ 0b0010  //移去用户权限2 -&gt; role = 0b1001<br>  role = role ^ 0b1000  //移去用户权限4 -&gt; role = 0b0001<br><br>3: 判权(&amp;: 与运算 两者为1时为1)<br>  role = 0b1011         //用户权限<br>  role &amp; 0b0001 &gt; 0     //有权限1<br>  role &amp; 0b0010 &gt; 0     //有权限2<br>  role &amp; 0b0100 = 0     //无权限3<br>  role &amp; 0b1000 &gt; 0     //有权限4<br></code></pre></td></tr></table></figure><h2 id="经典案例-LINUX文件权限管理"><a href="#经典案例-LINUX文件权限管理" class="headerlink" title="经典案例 LINUX文件权限管理"></a>经典案例 LINUX文件权限管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/temp: ls -l<br>-rw-r--r-- demofile<br>解析: -rwxrw-r--, 其中<br>  第1位表示 demofile 为一个文件<br>  第234位表示 文件所有者的权限是读、写和执行<br>  第567位表示 与文件所有者同一组的用户的权限是读、写但不能执行<br>  第890位表示 不与文件所有者同组的其他用户的权限是读不能写和执行<br><br>关于LINUX文件权限 和用户组建议单独了解一下<br><br>若想给demofile赋权为 全部权限 应该怎么做?<br>  chmod 777 demofile<br>此处的7对应0b111 --&gt; 对应 r w x 三权限<br>三个7分别对应 所有者、同组用户、其他用户三者权限<br>所以chmod 777 demofile后，该文件权限变成了<br>rwxrwxrwx<br></code></pre></td></tr></table></figure><h2 id="在MYSQL中使用"><a href="#在MYSQL中使用" class="headerlink" title="在MYSQL中使用"></a>在MYSQL中使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">首先创建一张表，role字段用INT类型即可<br>得到一张userRole表为:<br>  userId  INT<br>  role    INT<br>若想查出所有 拥有0b0010对应权限的用户们时<br>  SELECT userId from userRole where role &amp; 2 &gt; 0;<br>  即可: 2为0b0010的十进制表达<br><br>后续如果添加了权限, 只需要在最新的值前面不断补0即可<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">位运算表达，不仅可以用在权限中，其他例如开关、是否占用等等可以用01表示单位逻辑的情况均可使用<br><br>本POST仅为基础的思路介绍和简单伪代码，若正常使用，仍需做更多层的封装和维护<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM多光标插件——效率MAX</title>
    <link href="/vimmulticursor/"/>
    <url>/vimmulticursor/</url>
    
    <content type="html"><![CDATA[<!-- markdown-toc GFM --><ul><li><a href="#%E6%8F%92%E4%BB%B6%E7%AE%80%E4%BB%8B-mg979vim-visual-multi">插件简介 mg979&#x2F;vim-visual-multi</a></li><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E9%85%8D%E7%BD%AE">配置</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B">使用案例</a></li><li><a href="#ps">PS</a></li></ul><!-- markdown-toc --><h2 id="插件简介-mg979-x2F-vim-visual-multi"><a href="#插件简介-mg979-x2F-vim-visual-multi" class="headerlink" title="插件简介 mg979&#x2F;vim-visual-multi"></a>插件简介 <a href="https://github.com/mg979/vim-visual-multi">mg979&#x2F;vim-visual-multi</a></h2><p><a href="https://www.bilibili.com/video/BV1uF411c7Ro/">vim宏操作和多光标插件</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">VIM多光标插件，提供vim/nvim快速操作多光标编辑的能力<br>本POST会简单介绍 其 安装、配置、日常使用的过程。<br></code></pre></td></tr></table></figure><p>顺便在这里附上我自己的nvim配置仓库地址 <a href="https://github.com/yaocccc/nvim">yaocccc&#x2F;nvim</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">推荐使用vim-plug安装<br><br>Plug &#x27;mg979/vim-visual-multi&#x27;, &#123;&#x27;branch&#x27;: &#x27;master&#x27;&#125;<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vimrc">&quot; 贴上本人的配置<br>    let g:VM_theme                      = &#x27;ocean&#x27;<br>    let g:VM_highlight_matches          = &#x27;underline&#x27;<br>    let g:VM_maps                       = &#123;&#125;<br>    let g:VM_maps[&#x27;Find Under&#x27;]         = &#x27;&lt;C-n&gt;&#x27;<br>    let g:VM_maps[&#x27;Find Subword Under&#x27;] = &#x27;&lt;C-n&gt;&#x27;<br>    let g:VM_maps[&#x27;Select All&#x27;]         = &#x27;&lt;C-d&gt;&#x27;<br>    let g:VM_maps[&#x27;Select h&#x27;]           = &#x27;&lt;C-Left&gt;&#x27;<br>    let g:VM_maps[&#x27;Select l&#x27;]           = &#x27;&lt;C-Right&gt;&#x27;<br>    let g:VM_maps[&#x27;Add Cursor Up&#x27;]      = &#x27;&lt;C-Up&gt;&#x27;<br>    let g:VM_maps[&#x27;Add Cursor Down&#x27;]    = &#x27;&lt;C-Down&gt;&#x27;<br>    let g:VM_maps[&#x27;Add Cursor At Pos&#x27;]  = &#x27;&lt;C-x&gt;&#x27;<br>    let g:VM_maps[&#x27;Add Cursor At Word&#x27;] = &#x27;&lt;C-w&gt;&#x27;<br>    let g:VM_maps[&#x27;Remove Region&#x27;]      = &#x27;q&#x27;<br><br>&quot; 从上至下的意义:<br>    &quot; [&#x27;Find Under&#x27;]          -&gt; 选中光标下的词(ctrl+n继续向下选中相同文本)<br>    &quot; [&#x27;Find Subword Under&#x27;]  -&gt; 选中光标下的词(ctrl+n继续向下选中相同文本)<br>    &quot; [&#x27;Select All&#x27;]          -&gt; 选中文件中所有光标下的词<br>    &quot; [&#x27;Select h&#x27;]            -&gt; 从光标往左选中文本(ctrl+n继续向下选中相同文本)<br>    &quot; [&#x27;Select l&#x27;]            -&gt; 从光标往右选中文本(ctrl+n继续向下选中相同文本)<br>    &quot; [&#x27;Add Cursor Up&#x27;]       -&gt; 向上添加一个光标(原光标+上光标 继续使用则继续添加)<br>    &quot; [&#x27;Add Cursor Down&#x27;]     -&gt; 向下添加一个光标(原光标+下光标 继续使用则继续添加)<br>    &quot; [&#x27;Add Cursor At Pos&#x27;]   -&gt; 将当前光标添加入多光标列表中<br>    &quot; [&#x27;Add Cursor At Word&#x27;]  -&gt; 将当前光标所在词的词首加上多光标列表中<br>    &quot; [&#x27;Remove Region&#x27;]       -&gt; 移除当前光标<br></code></pre></td></tr></table></figure><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>!!!重要!!!</strong><br><strong>!!!重要!!!</strong><br><strong>!!!重要!!!</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">简单来说该插件提供三种模式:<br>  多光标 normal 模式<br>  多光标 visual 模式<br>  多光标 insert 模式<br><br>可以对应vim的三模式<br>如何切换:<br>  normal &lt;-&gt; visual 模式互相转换: Tab<br>  normal --&gt; insert 进入插入模式: i、a、c等 和 vim原生的按键是一样的<br>  insert --&gt; normal 返回普通模式: Esc<br><br>normal模式 可以使用 hjkl w e b f t $ ^ 0 等等按键来移动 多光标中的全部光标(不可以使用上下左右 PS: 上下左右可以用来移动原光标)<br>visual模式 可以使用 hjkl w e b f t $ ^ 0 等等按键来选中 多光标中的全部光标(不可以使用上下左右 PS: 上下左右可以用来移动原光标)<br>insert模式 可以使用 上下左右 等等按键来移动 多光标中的全部光标<br><br>如何从正常VIM模式中进入多光标模式<br>  1: VIM处于normal模式<br>  2: 用以下快捷键即可<br>    [&#x27;Find Under&#x27;]          -&gt; 选中光标下的词(ctrl+n继续向下选中相同文本)<br>    [&#x27;Find Subword Under&#x27;]  -&gt; 选中光标下的词(ctrl+n继续向下选中相同文本)<br>    [&#x27;Select All&#x27;]          -&gt; 选中文件中所有光标下的词<br>    [&#x27;Select h&#x27;]            -&gt; 从光标往左选中文本(ctrl+n继续向下选中相同文本)<br>    [&#x27;Select l&#x27;]            -&gt; 从光标往右选中文本(ctrl+n继续向下选中相同文本)<br>    [&#x27;Add Cursor Up&#x27;]       -&gt; 向上添加一个光标(原光标+上光标 继续使用则继续添加)<br>    [&#x27;Add Cursor Down&#x27;]     -&gt; 向下添加一个光标(原光标+下光标 继续使用则继续添加)<br>    [&#x27;Add Cursor At Pos&#x27;]   -&gt; 将当前光标添加入多光标列表中<br>    [&#x27;Add Cursor At Word&#x27;]  -&gt; 将当前光标所在词的词首加上多光标列表中<br><br>如何从多光标模式中退出<br>  一股脑Esc就对了<br></code></pre></td></tr></table></figure><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">当前有以下文本，试完成以下案例 原始光标初始位置在第1行的l位置<br><br>let aa = 1;<br>let bbb = 2;<br>let cccc = 3;<br>let ddddd = 4;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">案例1: 将 全部let 改成 const<br>案例重点: 如何添加多光标<br><br>方案1: ctrl+d c const<br>  1: ctrl+d 选中文件中所有光标下的词<br>  2: c 从visual模式进入插入模式，并变更当前选中的文本<br>方案2: ctrl+n ctrl+n ctrl+n ctrl+n c const<br>  1: ctrl+n 选中光标下的词 * 4次<br>  2: c 从visual模式进入插入模式，并变更当前选中的文本<br>方案3: ctrl+下 ctrl+下 ctrl+下 xxx i const<br>  1: ctrl+下 * 3次 将共计4个l位置的光标添加进多光标列表<br>  2: xxx删除 i进入插入模式<br>...<br></code></pre></td></tr></table></figure><p><img src="/img/vim%E5%A4%9A%E5%85%89%E6%A0%87%E6%8F%92%E4%BB%B6--%E6%95%88%E7%8E%87MAX/001.gif" alt="案例1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">案例2: 将 124行的 let 改成 const<br>案例重点: 如何取消/跳过某光标<br><br>方案1: ctrl+d 下下q c const<br>  1: ctrl+d 选中文件中所有光标下的词<br>  2: 下下 移动原始光标到第三行 q 取消当前光标<br>  3: c 从visual模式进入插入模式，并变更当前选中的文本<br>方案2: ctrl+n ctrl+n 下下 ctrl+n c const<br>  1: ctrl+n 选中光标下的词 * 2次<br>  2: 下下 移动原始光标到第四行<br>  3: ctrl+n 选中光标下的词<br>  4: c 从visual模式进入插入模式，并变更当前选中的文本<br>方案3: ctrl+下 下下 ctrl+x xxx i const<br>  1: ctrl+下 将共计2个l位置的光标添加进多光标列表<br>  2: 下下 移动原始光标到第四行<br>  3: ctrl+x 添加当前位置光标进多光标列表<br>  4: xxx删除 i进入插入模式<br>...<br></code></pre></td></tr></table></figure><p><img src="/img/vim%E5%A4%9A%E5%85%89%E6%A0%87%E6%8F%92%E4%BB%B6--%E6%95%88%E7%8E%87MAX/002.gif" alt="案例2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">案例3: 将文本内容改成<br>案例重点: 多光标下normal和visual的切换 光标的跳转等<br>  let aa = 1 * aa;<br>  let bbb = 2 * bbb;<br>  let cccc = 3 * cccc;<br>  let ddddd = 4 * ddddd;<br><br>方案1: ctrl+d tab w tab e y tab ww a * 空格 esc p<br>  1: ctrl+d 选中文件中所有光标下的词<br>  2: tab 从visual模式转换到normal模式<br>  3: w 跳到 下个词首(aa、bbb等所在词)<br>  4: tab 从normal模式转换到visual模式<br>  5: e选中到词尾 y复制选中部分<br>  6: tab 从visual模式转换到normal模式<br>  7: ww a ... 光标跳转并插入 * 空格<br>  8: esc 从 insert模式回归到normal<br>  9: p粘贴刚刚选中的多个词<br>方案2: ctrl+下 ctrl+下 ctrl+下 w tab e y tab ww a * 空格 esc p<br>  1: ctrl+下 * 3次 将共计4个l位置的光标添加进多光标列表<br>  2: w 跳到 下个词首(aa、bbb等所在词)<br>  3: tab 从normal模式转换到visual模式<br>  4: e选中到词尾 y复制选中部分<br>  5: tab 从visual模式转换到normal模式<br>  6: ww a ... 光标跳转并插入 * 空格<br>  7: esc 从 insert模式回归到normal<br>  8: p粘贴刚刚选中的多个词<br>...<br></code></pre></td></tr></table></figure><p><img src="/img/vim%E5%A4%9A%E5%85%89%E6%A0%87%E6%8F%92%E4%BB%B6--%E6%95%88%E7%8E%87MAX/003.gif" alt="案例3"></p><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">建议将列出的按键配置都自己试一遍<br>该插件还有不少其他用法，例如:<br>  自定义搜索文本跳转<br>  多行对齐<br>  ...<br><br>不过我不会 有需要进阶的同好可以看原仓库说明<br></code></pre></td></tr></table></figure><p><a href="https://github.com/mg979/vim-visual-multi">mg979&#x2F;vim-visual-multi</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>VIM</tag>
      
      <tag>NVIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
